code,problem_id,group_id,user_id
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,jakenu0x5e
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,kuwaaaaaaaaaaaaaaaaa
"sysモジュールを用いる
識別子がAと等しいとき、
sysのstdinを順にAとして、繰り返す
Aの両端から空白改行を取り除いた文字列を英大文字に変換した文字列を出力する
",0020,groupA,kichi941
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,bal4u
"入力された文字列を英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,cima
"入力された文字列をAとする
Aを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,novel
"入力された文字列の文字列をAとする
空文字列をAとする
Bを順にAとして、繰り返す
96がAの順序数より小さいかどうかが123より小さいとき、
AをBだけ増加させる
Aを出力する
",0020,groupA,tricom
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,tige
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,KubotaNoriko1230
"空文字列を間に入れて、つまり入力された文字列の各要素に整数を英大文字に変換した文字列を適用した列を連結した文字列を出力する
",0020,groupA,pypy
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,kyuna
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,ikatakos
"入力された文字列のリストをAとする
空列をAとする
Bを順にAとして、繰り返す
Aの末尾にBを英大文字に変換した文字列を追加する
空文字列を間に入れてAを連結した文字列を出力する
",0020,groupA,manaka
"osのenvironに対応する値、もし存在しなければBをAとする
AがBと等しいとき、
A、Bを開いたファイルストリームをsysのstdinにする
入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,RandyWaterhouse
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,bonoron
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,doorgod
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,Mackie
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,tkawata
"sysモジュールを用いる
osモジュールを用いる
入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,peroon
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,leeav_ten
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,meiadayz
"入力された文字列をAとする
空文字列をAとする
Bを順にAとして、繰り返す
Aが、つまり空白文字と等しくまたはAがBと等しいとき、
AにBを加えた値をAとする
Aに文字コードBの順序数から32を引いた値の文字を加えた値をAとする
Aを出力する
",0020,groupA,misuta
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,baron2
"識別子がAと等しいとき、
入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,zywuwen
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,tefu417
"入力された文字列をAとする
Aを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,shana
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,nananashi
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,soutatahara
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,tallestorange
"BをAとする
BをAとする
input().translate(str.maketrans(A,B))を出力する
",0020,groupA,Sim0000
"入力された文字列の英大小文字を交換した文字列を出力する
",0020,groupA,nut5ch3st
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,Fulltea
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Pure70os
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,nagasw0603
"入力された文字列を整数とする
整数を英大文字に変換した文字列を出力する
",0020,groupA,yunakura
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,proayu33
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,aaa119
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,mimimi323
"入力された文字列の文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,myst7
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,roy2020
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,decodeco
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,rei089
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,mokomoko58
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,mayu_build_01
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,sh415
"入力された文字列の文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,gem19
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,jngkk97
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,mio0103
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,oreo0320
"入力された文字列の文字列をAとする
整数、Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,kinako_shinonome
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,obrm2k
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,blue2020
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Aliceandkumasan
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,kyk_hm_99
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,iori125
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,moeknm
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,snoopea
"入力された文字列をAとする
整数、Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,yuko0828
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,artms007
"入力された文字列の文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,mmk20
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,yui_k
"入力された文字列を英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,ysk18_
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,shioshiooshio
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,HARU55
"入力された文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,bn1224
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,Will25
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,tamamii20
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,tatejima
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,ym09rr6
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,kfwh87
"入力された文字列を英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,honot
"入力された文字列を英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,meika
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Nakada065
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Pooh0514
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,udonman
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,salmon04
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,yuzukosyo
"入力された文字列の文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,phantom_0422
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,Nanairo0716
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,hoshitaro32
"入力された文字列の文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,lisa_06
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,miyu777
"入力された文字列をAとする
整数、Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,prprpr
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,mai0526
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,giraffe09
"入力された文字列の文字列を整数とする
整数を英大文字に変換した文字列を整数とする
整数を出力する
",0020,groupA,koyuki
"入力された文字列をAとする
整数、Bの英大小文字を交換した文字列をAとする
Aを出力する
",0020,groupA,maple13
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,Kunitomo
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,tom99
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,guoguo
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,kurumi048
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,nabenabe0927
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,honoka46
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,mai0321
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Lemon_1127
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,wonka3065
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Hui0946
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,maih120615
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,kurumin212
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,okrn_cindy
"入力された文字列の文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,yukka_rinrin
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,ayk_rb_1103
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,momokai
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,kazari
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Haru157
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,aoaoaoi
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,kori21
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,blackpinky
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,arashi99
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,water0914
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,m1916075_
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,akpinee
"入力された文字列をAとする
整数、Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,umnkit0922
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,ayame_1001
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",0020,groupA,KA1NA0913
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,blues11
"入力された文字列の文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,stk95
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,kkk2m
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,Kureha
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,rt56
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,ltwx4649
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,horichan
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Shion20
"入力された文字列をAとする
整数、Aを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,s_68
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,yuyu268
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,kana0409
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,shoko_a_
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,dice37
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,ucacao33
"入力された文字列をAとする
整数、Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,Shiori_Y
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,asdfghqwerty
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,_gm49
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,su1424zu
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,harapeco
"入力された文字列の文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,gon35
"入力された文字列をAとする
Aを英大文字に変換した文字列をAとする
Aを出力する
",0020,groupA,slow1224
"入力された文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,hamuhamu12
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,ss10225_
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,miyh2523
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,ai0322
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,natsuki0804
"空文字列を間に入れて、つまり入力された文字列の各要素に整数を英大文字に変換した文字列を適用した列を連結した文字列を出力する
",0020,groupA,miiyu
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,matsuki20
"入力された文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,tokkankoji
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,apoten0418
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,mh21716087
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,bono2325
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,s__wk101
"入力された文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,tkzw79
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,crescent_moon
"入力された文字列の文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,apple05
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",0020,groupA,maimada0519
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,konkon666
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,pen8pan9pon
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,m1816040kc
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,Yknnn14
"入力された文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,me72
"入力された文字列の文字列をAとする
Aを英大文字に変換した文字列を出力する
",0020,groupA,nanako1116
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,Vellu0129
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,sugarchan0
"入力された文字列を英大文字に変換した文字列を出力する
",0020,groupA,sabuk421
"入力された文字列を整数とする
整数の英大小文字を交換した文字列を出力する
",0020,groupA,Yuki13
"入力された文字列をAとする
整数、Aを英大文字に変換した文字列を出力する
",0020,groupA,okashi77
"空文字列を間に入れて、つまり入力された文字列の各要素に整数を英大文字に変換した文字列を適用した列を連結した文字列を出力する
",0020,groupA,Shino107
"入力された文字列の英大小文字を交換した文字列を出力する
",0020,groupA,aoi_0326
"stringモジュールを用いる
BをAとする
BをAとする
AがBに含まれるとき、
AのBのCと等しい要素の最初の位置番目を返す
AがBに含まれるとき、
AのBのCと等しい要素の最初の位置番目を返す
Aを返す
1、Aを開いたファイルストリームに空文字列を間に入れて0を開いたファイルストリームから読み込んだ一行の各要素にBを適用した列を連結した文字列を書き込む
",ITP1_8_A,groupA,jakenu0x5e
"sysモジュールを用いる
sysモジュールを用いる
Aから読み込んだ一行を入力された文字列とする
入力された文字列の両端から空白改行を取り除いた文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
識別子がAと等しいとき、
main(sys.argv[1:])
",ITP1_8_A,groupA,kichi941
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,cima
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,novel
"入力された文字列をAとする
空文字列をAとする
Bを順にAとして、繰り返す
Aの全てが英大文字のとき、
AをBを英小文字に変換した文字列だけ増加させる
AをBを英大文字に変換した文字列だけ増加させる
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,tricom
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,tige
"入力された文字列を整数とする
整数の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,KubotaNoriko1230
"入力された文字列を順にAとして、繰り返す
Aの全てが英大文字のとき、
改行せずにAを英小文字に変換した文字列を出力する
改行せずにAを英大文字に変換した文字列を出力する
改行せずにAを出力する
空行を出力する
",ITP1_8_A,groupA,pypy
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,bs5lNkJ
"空文字列を間に入れて、つまり入力された文字列の各要素をAとし、(A.upper()、A.lower())からなる列のAの全てが英大文字かどうか番目の列を連結した文字列を出力する
",ITP1_8_A,groupA,kyuna
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,ikatakos
"入力された文字列をAとする
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目の全てが英小文字のとき、
AをBのC番目を英大文字に変換した文字列だけ増加させる
AをBのC番目を英小文字に変換した文字列だけ増加させる
AをBのC番目だけ増加させる
Aを出力する
",ITP1_8_A,groupA,manaka
"osのenvironに対応する値、もし存在しなければBをAとする
AがBと等しいとき、
A、Bを開いたファイルストリームをsysのstdinにする
空文字列をAとする
入力された文字列の両端から空白改行を取り除いた文字列を順にAとして、繰り返す
Bの順序数をAとする
65がA以下かどうかが90以下のとき、
Aを文字コードBに32を加えた値の文字だけ増加させる
Aを文字コードBから32を引いた値の文字だけ増加させる
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,RandyWaterhouse
"識別子がAと等しいとき、
入力された文字列をAとする
空文字列を間に入れて(Aの全てが英小文字のときAを英大文字に変換した文字列、そうでなければBの各要素をAとし、A.lower()の列)からなる列を連結した文字列を出力する
",ITP1_8_A,groupA,yoheikikuta
"整数、入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,tsuru_aji
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,bonoron
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Mackie
"A
Aの英大小文字を交換した文字列を返す
toggle(input())を出力する
run()
",ITP1_8_A,groupA,y1721
"sysモジュールを用いる
osモジュールを用いる
入力された文字列の両端から空白改行を取り除いた文字列をAとする
Bを順にAとして、繰り返す
Aの全てが英小文字のとき、
改行せずにAを英大文字に変換した文字列を出力する
改行せずにAを英小文字に変換した文字列を出力する
改行せずにAを出力する
空行を出力する
",ITP1_8_A,groupA,peroon
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,leeav_ten
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,momiji6
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,meiadayz
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,yreb
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,misuta
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,baron2
"入力された文字列をAとする
空文字列をAとする
Bを順にAとして、繰り返す
Aの全てが英大文字のとき、
AをBを英小文字に変換した文字列だけ増加させる
AをBを英大文字に変換した文字列だけ増加させる
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,mxg7y
"入力された文字列をAとする
Bを順にAとして、繰り返す
Aの全てが英大文字のとき、
改行せずにAを英小文字に変換した文字列を出力する
改行せずにAを英大文字に変換した文字列を出力する
空行を出力する
",ITP1_8_A,groupA,rockbirds12
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,zywuwen
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,tefu417
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,halfpennyworths
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,shana
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,nananashi
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,rune
"入力された文字列をAとする
空文字列をAとする
Bを順にAとして、繰り返す
Aの全てが英大文字のとき、
Aを出力する
",ITP1_8_A,groupA,PythonHolic
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,soutatahara
"入力された文字列を整数とする
整数を順にAとして、繰り返す
Aの全てが英大文字のとき、
改行せずにAを英小文字に変換した文字列を出力する
改行せずにAを英大文字に変換した文字列を出力する
改行せずにAを出力する
空行を出力する
",ITP1_8_A,groupA,tappinasa
"sysモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,naoto172
"空文字列を間に入れてAの全てが英小文字のときAを英大文字に変換した文字列、そうでなければAの全てが英大文字のときAを英小文字に変換した文字列、そうでなければinput()の各要素をAとし、Aの列を連結した文字列を出力する
",ITP1_8_A,groupA,Sim0000
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,toyuzuko
"入力された文字列を整数とする
整数の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,jj1guj
"入力された文字列をBで分割した字句列をAとする
Cの各要素をBとし、Bの英大小文字を交換した文字列の列をAとする
Aを間に入れてBを連結した文字列を出力する
",ITP1_8_A,groupA,nut5ch3st
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Pure70os
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,nagasw0603
"入力された文字列を整数とする
整数の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,yunakura
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,proayu33
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,aaa119
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,mimimi323
"入力された文字列をAとする
整数、Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,myst7
"入力された文字列をAとする
Aの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,roy2020
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,decodeco
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,rei089
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,mokomoko58
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,mayu_build_01
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,sh415
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,gem19
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,jngkk97
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,mio0103
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,oreo0320
"入力された文字列の文字列をAとする
整数、Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,kinako_shinonome
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,obrm2k
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,blue2020
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Aliceandkumasan
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,kyk_hm_99
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,iori125
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,moeknm
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,snoopea
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,yuko0828
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,artms007
"入力された文字列の文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,mmk20
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,yui_k
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,ysk18_
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,shioshiooshio
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,HARU55
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,bn1224
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Will25
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,tamamii20
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,tatejima
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,ym09rr6
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,kfwh87
"入力された文字列の英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,honot
"入力された文字列をAとする
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の文字列をAとする
AのB番目の全てが英小文字のとき、
BのC番目を英大文字に変換した文字列をAとする
BのC番目を英小文字に変換した文字列をAとする
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,meika
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Nakada065
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Pooh0514
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,udonman
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,salmon04
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,yuzukosyo
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,phantom_0422
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Nanairo0716
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,hoshitaro32
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,lisa_06
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,miyu777
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,prprpr
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,mai0526
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,giraffe09
"入力された文字列の文字列を整数とする
整数の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,koyuki
"入力された文字列をAとする
整数、Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,maple13
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,Kunitomo
"入力された文字列を整数とする
整数の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,tom99
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,guoguo
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,kurumi048
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,nabenabe0927
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,honoka46
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,mai0321
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Lemon_1127
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,wonka3065
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Hui0946
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,maih120615
"入力された文字列をAとする
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の文字列をAとする
AのB番目の全てが英小文字のとき、
BのC番目を英大文字に変換した文字列をAとする
BのC番目を英小文字に変換した文字列をAとする
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,kurumin212
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,okrn_cindy
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,yukka_rinrin
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,ayk_rb_1103
"入力された文字列をAとする
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の文字列をAとする
AのB番目の全てが英小文字のとき、
BのC番目を英大文字に変換した文字列をAとする
BのC番目を英小文字に変換した文字列をAとする
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,momokai
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,kazari
"入力された文字列を整数とする
整数の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Haru157
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,aoaoaoi
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,kori21
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,blackpinky
"入力された文字列をAとする
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の文字列をAとする
AのB番目の全てが英小文字のとき、
BのC番目を英大文字に変換した文字列をAとする
BのC番目を英小文字に変換した文字列をAとする
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,arashi99
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,water0914
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,m1916075_
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,akpinee
"入力された文字列をAとする
整数、Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,umnkit0922
"入力された文字列をAとする
空文字列をAとする
Bを順にAとして、繰り返す
Aの全てが英大文字のとき、
AをBを英小文字に変換した文字列だけ増加させる
AをBを英大文字に変換した文字列だけ増加させる
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,ayame_1001
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,KA1NA0913
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,blues11
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,stk95
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,kkk2m
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Kureha
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,rt56
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,ltwx4649
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,horichan
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Shion20
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,s_68
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,yuyu268
"入力された文字列をAとする
整数、Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,kana0409
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,shoko_a_
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,dice37
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,ucacao33
"入力された文字列をAとする
整数、Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,Shiori_Y
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,asdfghqwerty
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,_gm49
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,su1424zu
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,harapeco
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,gon35
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,slow1224
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,hamuhamu12
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,ss10225_
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,miyh2523
"入力された文字列の文字列をAとする
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の文字列をAとする
AのB番目の全てが英小文字のとき、
BのC番目を英大文字に変換した文字列をAとする
BのC番目を英小文字に変換した文字列をAとする
BのC番目をAとする
AをBだけ増加させる
Aを出力する
",ITP1_8_A,groupA,ai0322
"入力された文字列をAとする
Bの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,natsuki0804
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,mnh24686954
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,miiyu
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,matsuki20
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,tokkankoji
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,apoten0418
"入力された文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,mh21716087
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,bono2325
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,s__wk101
"入力された文字列の文字列をAとする
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目の全てが英大文字のとき、
AをBのC番目を英小文字に変換した文字列だけ増加させる
AをBのC番目を英大文字に変換した文字列だけ増加させる
Aを出力する
",ITP1_8_A,groupA,tkzw79
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,crescent_moon
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,apple05
"入力された文字列の文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,maimada0519
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,konkon666
"sysモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,pen8pan9pon
"入力された文字列の文字列をAとする
Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Yknnn14
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,me72
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列をAとする
Aを出力する
",ITP1_8_A,groupA,nanako1116
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,sugarchan0
"入力された文字列をAとする
Bを英小文字に変換した文字列をAとする
Bを英大文字に変換した文字列をAとする
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCのB番目と等しいとき、
AをBのC番目だけ増加させる
AをBのC番目だけ増加させる
Aを出力する
",ITP1_8_A,groupA,sabuk421
"入力された文字列を整数とする
整数の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Yuki13
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,okashi77
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,Shino107
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,aoi_0326
"入力された文字列をAとする
整数、Aの英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,yuuu197
"入力された文字列の英大小文字を交換した文字列を出力する
",ITP1_8_A,groupA,yamamotokotoha
"stringモジュールを用いる
0を開いたファイルストリームから読み込んだデータをAとする
(0)からなる列の26回分の列をAとする
Bを順にAとして、繰り返す
Bの先頭からCを探して見つかった位置をAとする
Aが-1より大きいとき、
AのB番目を1だけ増加させる
Bの先頭からCを探して見つかった位置をAとする
Aが-1より大きいとき、
AのB番目を1だけ増加させる
C、Dの要素をそれぞれ組にした列を順にA、Bとして、繰り返す
Aを(B、C)の組で割った余りを出力する
",ITP1_8_C,groupA,jakenu0x5e
"sysモジュールを用いる
sysモジュールを用いる
collectionsモジュールを用いる
Aから読み込んだ一行を入力された文字列とする
defaultdict(int)をAとする
sysのstdinを順にAとして、繰り返す
Aの両端から空白改行を取り除いた文字列をAとする
Bを順にAとして、繰り返す
Aが全てアルファベットのとき、
Aを英小文字に変換した文字列をAとする
AのB番目を1だけ増加させる
Bを順にAとして、繰り返す
Aを書式としてB、CのB番目で整形した文字列を出力する
識別子がAと等しいとき、
main(sys.argv[1:])
",ITP1_8_C,groupA,kichi941
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
",ITP1_8_C,groupA,cima
"sysモジュールを用いる
空文字列をAとする
sysのstdinを順にAとして、繰り返す
AをBだけ増加させる
BをAとする
Bを順にAとして、繰り返す
B内のCの出現回数をAとする
B内のCを英大文字に変換した文字列の出現回数をAとする
AにBを加えた値にCにDを加えた値の文字列を加えた値を出力する
",ITP1_8_C,groupA,novel
"(0)からなる列の26回分の列を無限の整数列とする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を英小文字に変換した文字列をAとする
Bを順にAとして、繰り返す
96がAの順序数より小さいかどうかが124より小さいとき、
無限の整数列のAの順序数から97を引いた値番目を1だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,tricom
"空列をAとする
sysのstdinを順にAとして、繰り返す
Aの末尾にBを追加する
空文字列を間に入れてBを連結した文字列を英小文字に変換した文字列をAとする
Bのascii_lowercaseを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,tige
"0から26未満までの数列の各要素をBとし、0の列のリストをAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
Aを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aが96より大きくかつAが123より小さいとき、
AのBから97を引いた値番目を1だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、CのAから97を引いた値番目を出力する
",ITP1_8_C,groupA,KubotaNoriko1230
"空文字列をAとする
((B, 97から123未満までの数列の各要素をCとし、、つまり文字コードCの文字の列の各要素をBとし、0の整数値の列))からなる辞書をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
AをBだけ増加させる
繰り返しを中断する
Bを英小文字に変換した文字列を順にAとして、繰り返す
Aの順序数が97以上かつAの順序数が122以下のとき、
AのB番目を1だけ増加させる
xをパラメータとしてxの先頭を返す関数をキーとしてCのキーと値の集まりをソートした列を順にA、Bとして、繰り返す
Aを書式としてB、Cで整形した文字列を出力する
",ITP1_8_C,groupA,pypy
"stringモジュールを用いる
sysモジュールを用いる
sysのstdinから読み込んだデータをAとする
0から26未満までの数列を順にAとして、繰り返す
Bのascii_lowercaseのC番目をAとする
Bのascii_uppercaseのC番目をAとする
B内のCの出現回数にB内のDの出現回数を加えた値をAとする
Aを書式としてB、Cで整形した文字列を出力する
",ITP1_8_C,groupA,bs5lNkJ
"sysモジュールを用いる
collectionsモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列の辞書カウンタをAとする
97から123未満までの数列の各要素にBを適用した列を順にAとして、繰り返す
A、B、CのA番目を出力する
",ITP1_8_C,groupA,kyuna
"sysモジュールを用いる
stringモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
Bのascii_lowercaseを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,ikatakos
"osのenvironに対応する値、もし存在しなければBをAとする
AがBと等しいとき、
A、Bを開いたファイルストリームをsysのstdinにする
97から123未満までの数列の各要素をBとし、、つまり文字コードBの文字の列をAとする
((A, Bの各要素をAとし、0の列))からなる辞書を無限の整数列とする
sysのstdinを順にAとして、繰り返す
Bを英小文字に変換した文字列を順にAとして、繰り返す
AがBに含まれるとき、
無限の整数列のA番目を1だけ増加させる
Bを順にAとして、繰り返す
A、B、無限の整数列のA番目を出力する
",ITP1_8_C,groupA,RandyWaterhouse
"stringモジュールを用いる
sysモジュールを用いる
識別子がAと等しいとき、
sysのstdinから読み込んだデータをAとする
Bのascii_lowercaseを順にAとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,yoheikikuta
"0から26未満までの数列の各要素をCとし、、つまり文字コードBの順序数にCを加えた値の文字の列をAとする
0を開いたファイルストリームから読み込んだデータをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
改行せずにAのB番目にCを加えた値を出力する
Aを英小文字に変換した文字列内のBのC番目の出現回数を出力する
",ITP1_8_C,groupA,tsuru_aji
"1の間、次を繰り返す
次は例外に関する条件がある
入力された文字列を英小文字に変換した文字列をAとする
Bを順にAとして、繰り返す
AがBに含まれるとき、
Cのキーと値の集まりを順にA、Bとして、繰り返す
A、B、Cを出力する
",ITP1_8_C,groupA,bonoron
"sysモジュールを用いる
BをAとする
sysのstdinから読み込んだデータをAとする
Bを順にAとして、繰り返す
AにBを加えた値にCを英小文字に変換した文字列内のAの出現回数の文字列を加えた値を出力する
",ITP1_8_C,groupA,Mackie
"stringモジュールを用いる
collectionsモジュールを用いる
((A, 2)、(B, 1))からなる辞書の辞書カウンタ
Bを英小文字に変換した文字列の各要素をAとし、Aが全てアルファベットのときのAの列の辞書カウンタを返す
空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列だけ増加させる
繰り返しを中断する
Bから始まる無限の整数列をAとする
Bのascii_lowercaseを順にAとして、繰り返す
A、B、CのA番目を出力する
識別子がAと等しいとき、
run()
",ITP1_8_C,groupA,y1721
"sysモジュールを用いる
osモジュールを用いる
collectionsモジュールを用いる
BをAとする
defaultdict(int)をAとする
sysのstdinを順にAとして、繰り返す
Bを順にAとして、繰り返す
Bを英小文字に変換した文字列をAとする
AがBに含まれるとき、
AのB番目を1だけ増加させる
Bを順にAとして、繰り返す
Aを書式としてB、CのB番目で整形した文字列を出力する
",ITP1_8_C,groupA,peroon
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列だけ増加させる
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
文字コードAの文字にBを加えた値、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,leeav_ten
"BをAとする
空文字列をAとする
1の間、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、D内のAのB番目の出現回数を出力する
",ITP1_8_C,groupA,momiji6
"入力された文字列をAとする
Aを英小文字に変換した文字列をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
入力された文字列をAとする
Aを英小文字に変換した文字列をAとする
AをBだけ増加させる
何もしない
Bの順序数からBの順序数に26を加えた値未満までの数列を順にAとして、繰り返す
文字コードBの文字をAとする
B内のCの出現回数をAとする
AにBを加えた値にCの文字列を加えた値を出力する
",ITP1_8_C,groupA,meiadayz
"BをAとする
sysモジュールを用いる
空列をAとする
sysのstdinを順にAとして、繰り返す
Aの末尾にBを英小文字に変換した文字列を追加する
(0)からなる列の26回分の列をAとする
Bを順にAとして、繰り返す
0からBの長さ未満までの数列を順にAとして、繰り返す
0から26未満までの数列を順にAとして、繰り返す
AのB番目がCのD番目と等しいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,yreb
"(0)からなる列の200回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Aを英小文字に変換した文字列をAとする
Bを順にAとして、繰り返す
AのBの順序数番目を1だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字にBを加えた値にCのA番目の文字列を加えた値を出力する
",ITP1_8_C,groupA,misuta
"sysモジュールを用いる
空辞書をAとする
sysのstdinを順にAとして、繰り返す
Bを順にAとして、繰り返す
Aが全てアルファベットのとき、
Bを英小文字に変換した文字列をAとする
Aに対応する値、もし存在しなければB、0に1を加えた値をAのB番目にする
0から26未満までの数列を順にAとして、繰り返す
文字コードBの順序数にCを加えた値の文字をAとする
""{} : {}""を出力する
",ITP1_8_C,groupA,baron2
"sysモジュールを用いる
sysのstdinから読み込んだ行の列の各要素をBとし、Bの両端から空白改行を取り除いた文字列の列をAとする
Bを順にAとして、繰り返す
Bを順にAとして、繰り返す
Bを英小文字に変換した文字列をAとする
Aの順序数がBの順序数以下かつBの順序数がCの順序数以下のとき、
AのB番目を1だけ増加させる
Cのキーと値の集まりを順にA、Bとして、繰り返す
AにBを加えた値にCの文字列を加えた値を出力する
",ITP1_8_C,groupA,mxg7y
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
文字コード97にAを加えた値の文字にBを加えた値にC内の、つまり文字コード97+Aの文字の出現回数の文字列を加えた値を出力する
",ITP1_8_C,groupA,rockbirds12
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
AをBを英小文字に変換した文字列だけ増加させる
繰り返しを中断する
97から97に26を加えた値未満までの数列の各要素をBとし、、つまり文字コードBの文字の列をAとする
Bを順にAとして、繰り返す
AにBを加えた値にC内のAの出現回数の文字列を加えた値を出力する
",ITP1_8_C,groupA,zywuwen
"BをAとする
0から26未満までの数列の各要素をBとし、0の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCに含まれまたはAのB番目を英小文字に変換した文字列がCに含まれるとき、
AのBのCのD番目を英小文字に変換した文字列と等しい要素の最初の位置番目を1だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,tefu417
"sysモジュールを用いる
collectionsモジュールを用いる
defaultdict(int)をAとする
sysのstdinから読み込んだ行の列をAとする
Bを順にAとして、繰り返す
Bの末尾から空白改行を取り除いた文字列を順にAとして、繰り返す
Aが全てアルファベットのとき、
Aを英小文字に変換した文字列をAとする
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードBの順序数にCを加えた値の文字をAとする
""{} : {}""を出力する
",ITP1_8_C,groupA,halfpennyworths
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
Bの順序数をAとする
Bの順序数をAとする
BからCに1を加えた値未満までの数列を順にAとして、繰り返す
B内の、つまり文字コードCの文字の出現回数をAとする
Aを書式として、つまり文字コードBの文字、Cで整形した文字列を出力する
",ITP1_8_C,groupA,shana
"sysモジュールを用いる
空文字列をAとする
sysのstdinを順にAとして、繰り返す
AをBだけ増加させる
Aを英小文字に変換した文字列をAとする
Aのリストを順に整数として、繰り返す
(、つまり整数、A、B内の、つまり整数の出現回数)からなる列を展開してを出力する
",ITP1_8_C,groupA,nananashi
"fileinputモジュールを用いる
BをAとする
空辞書をAとする
Bを順にAとして、繰り返す
0をAのB番目にする
B.input()を順にAとして、繰り返す
Bを英小文字に変換した文字列を順にAとして、繰り返す
AがBに含まれるとき、
AのB番目を1だけ増加させる
Cのキーと値の集まりを順にA、Bとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,rune
"sysモジュールを用いる
sysのstdinをAとする
(0)からなる列の26回分の列をAとする
Bを順にAとして、繰り返す
Bを英小文字に変換した文字列をAとする
0から26未満までの数列を順にAとして、繰り返す
AのB番目をC内の、つまり文字コードDの順序数にBを加えた値の文字の出現回数だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードBの順序数にCを加えた値の文字の文字列をAとする
改行せずにAにBを加えた値を出力する
AのB番目を出力する
",ITP1_8_C,groupA,PythonHolic
"BをAとする
空列をAとする
Bを順にAとして、繰り返す
Aの末尾にBを追加する
空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Aが、つまり空文字列と等しいとき、
繰り返しを中断する
AにBを加えた値をAとする
繰り返しを中断する
空列をAとする
Bを順にAとして、繰り返す
Aの末尾にBを英小文字に変換した文字列を追加する
Bを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,tappinasa
"sysモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
(0)からなる列の26回分の列をAとする
BをAとする
sysのstdinから読み込んだデータをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しくまたはAがBを英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
繰り返しを中断する
Aを1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
Aを(BのC番目、DのC番目)の組で割った余りを出力する
",ITP1_8_C,groupA,naoto172
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
Bを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,Sim0000
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
(0)からなる列の26回分の列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
0がAのB番目の順序数から97を引いた値以下かどうかが26より小さいとき、
AのBのC番目の順序数から97を引いた値番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAに97を加えた値の文字にBを加えた値にCのA番目の文字列を加えた値を出力する
",ITP1_8_C,groupA,toyuzuko
"sysモジュールを用いる
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目が、つまり無限の整数列に含まれるとき、
無限の整数列のAのB番目番目を1だけ増加させる
97から97に26を加えた値未満までの数列を順にAとして、繰り返す
文字コードAの文字にBを加えた値に無限の整数列の、つまり文字コードAの文字番目の文字列を加えた値を出力する
",ITP1_8_C,groupA,jj1guj
"sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
Bのascii_lowercaseを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,nut5ch3st
"sysモジュールを用いる
空辞書をAとする
sysのstdinを順にAとして、繰り返す
Bを英小文字に変換した文字列のリストを順にAとして、繰り返す
Aに対応する値、もし存在しなければB、0に1を加えた値をAのB番目にする
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、Cに対応する値、もし存在しなければ、つまり文字コードAの文字、0を出力する
",ITP1_8_C,groupA,Pure70os
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,nagasw0603
"sysモジュールを用いる
空辞書をAとする
sysのstdinを順にAとして、繰り返す
Bを英小文字に変換した文字列のリストを順にAとして、繰り返す
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
",ITP1_8_C,groupA,yunakura
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
BのリストをAとする
Bを順にAとして、繰り返す
B内のCの出現回数をAとする
""{} : {}""を出力する
",ITP1_8_C,groupA,proayu33
"BをAとする
空列をAとする
空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aの末尾にBを追加する
97から123未満までの数列を順にAとして、繰り返す
B内のCの出現回数をAとする
Aの末尾にBを追加する
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,aaa119
"空列をAとする
空列をAとする
空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
Bを英小文字に変換した文字列を順にAとして、繰り返す
Aの末尾にBの順序数を追加する
0から27未満までの数列を順にAとして、繰り返す
Aの末尾に97にBを加えた値を追加する
Bを順にAとして、繰り返す
A内のBの出現回数が0と等しいとき、
Aの末尾に0を追加する
Aの末尾にB内のCの出現回数を追加する
0から26未満までの数列を順にAとして、繰り返す
空白文字を代わりの行末として文字コードAに97を加えた値の文字を出力する
空白文字を代わりの行末としてAを出力する
AのB番目を出力する
",ITP1_8_C,groupA,mimimi323
"(0)からなる列の26回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Bを英小文字に変換した文字列をAとする
Bを順にAとして、繰り返す
96がAの順序数より小さいかどうかが124より小さいとき、
AのBの順序数から97を引いた値番目を1だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,myst7
"BをAとする
(0)からなる列の26回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCに含まれまたはAのB番目を英小文字に変換した文字列がCに含まれるとき、
AのBのCのD番目を英小文字に変換した文字列と等しい要素の最初の位置番目を1だけ増加させる
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,roy2020
"stringモジュールを用いる
collectionsモジュールを用いる
Bのascii_lettersをAとする
空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列のリストをAとする
AをBだけ増加させる
繰り返しを中断する
Bの辞書カウンタをAとする
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にDのA[0+B]番目にDのA[26+B]番目を加えた値の文字列を加えた値を出力する
",ITP1_8_C,groupA,decodeco
"sysモジュールを用いる
(0)からなる列の26回分の列をAとする
sysのstdinから読み込んだデータをAとする
Bを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数から97を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAに97を加えた値の文字、B、CのA番目を出力する
",ITP1_8_C,groupA,rei089
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,mokomoko58
"空列をAとする
空文字列をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
Aを入力された文字列だけ増加させる
何もしない
Aの末尾にBを追加する
空文字列を間に入れてAを連結した文字列をAとする
Bを間に入れてAを連結した文字列をAとする
Bを英小文字に変換した文字列をAとする
空列をAとする
1をAとする
Bの長さをAとする
AがB以下の間、次を繰り返す
BのCから1を引いた値番目の順序数をAとする
Aの末尾にBを追加する
Aを1だけ増加させる
1をAとする
97から123未満までの数列を順にAとして、繰り返す
B内のCの出現回数をAとする
文字コードAの文字をネイピア数とする
""{} : {}""を出力する
Aを1だけ増加させる
",ITP1_8_C,groupA,mayu_build_01
"0から26未満までの数列の各要素をBとし、0の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAにBの順序数を加えた値の文字、C、DのA番目を出力する
",ITP1_8_C,groupA,sh415
"中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
整数、Bを英小文字に変換した文字列をAとする
Bを順にAとして、繰り返す
AがBのキーの集まりに含まれるとき、
AのB番目を1だけ増加させる
Bのキーと値の集まりを順にA、無限の整数列として、繰り返す
Aを書式としてB、無限の整数列で整形した文字列を出力する
",ITP1_8_C,groupA,gem19
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列だけ増加させる
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
文字コードAの文字にBを加えた値、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,jngkk97
"BをAとする
空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
Bを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,mio0103
"sysモジュールを用いる
stringモジュールを用いる
Bのascii_lettersをAとする
collectionsモジュールを用いる
sysのstdinから読み込んだデータのリストをAとする
Bの辞書カウンタをAとする
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にDのA[0+B]番目にDのA[26+B]番目を加えた値の文字列を加えた値を出力する
",ITP1_8_C,groupA,oreo0320
"(0)からなる列の123回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
繰り返しを中断する
BのリストをAとする
0をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
BのC番目をAとする
AのBの順序数番目を1だけ増加させる
Aを1だけ増加させる
繰り返しを中断する
97をAとする
0から26未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、CのA番目にCのAから32を引いた値番目を加えた値を出力する
Aを1だけ増加させる
",ITP1_8_C,groupA,kinako_shinonome
"sysモジュールを用いる
BをAとする
sysのstdinから読み込んだデータをAとする
Bを順にAとして、繰り返す
AにBを加えた値にCを英小文字に変換した文字列内のAの出現回数の文字列を加えた値を出力する
",ITP1_8_C,groupA,obrm2k
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
AのリストをAとする
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
改行せずに文字コードAの文字を出力する
改行せずにAを出力する
0をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目が、つまり文字コードCの文字と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_8_C,groupA,Aliceandkumasan
"0から26未満までの数列の各要素をBとし、0の列をAとする
BをAとする
0を開いたファイルストリームから読み込んだデータを整数とする
整数を順にAとして、繰り返す
0からBの長さ未満までの数列を順にAとして、繰り返す
AがBのC番目と等しくまたはAがBのC番目を英大文字に変換した文字列と等しいとき、
AのB番目に1を加えた値をAのB番目にする
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,kyk_hm_99
"(0)からなる列の26回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAにBの順序数を加えた値の文字、C、DのA番目を出力する
",ITP1_8_C,groupA,iori125
"stringモジュールを用いる
Bのascii_lowercaseをAとする
(0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0、0)からなる列をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
入力された文字列をAとする
Aのとき、
Aを英小文字に変換した文字列をAとする
0から26未満までの数列を順にAとして、繰り返す
B内のCのD番目の出現回数をAとする
AのB番目をCだけ増加させる
Aを1だけ増加させる
何もしない
0から26未満までの数列を順にAとして、繰り返す
改行せずにAのB番目を出力する
改行せずにAを出力する
AのB番目を出力する
Aを1だけ増加させる
",ITP1_8_C,groupA,moeknm
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列の文字列だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,snoopea
"空列をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
Aの末尾に入力された文字列を追加する
何もしない
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列をAのB番目にする
空文字列を間に入れてBを連結した文字列をAとする
Bを順にAとして、繰り返す
A、B、C内のAの出現回数を出力する
",ITP1_8_C,groupA,yuko0828
"(0)からなる列の26回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Aを英小文字に変換した文字列のリストをAとする
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aが97以上かつAが123以下のとき、
AのBから97を引いた値番目を1だけ増加させる
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、CのAから97を引いた値番目を出力する
",ITP1_8_C,groupA,artms007
"0から26未満までの数列の各要素をBとし、0の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAにBの順序数を加えた値の文字、C、DのA番目を出力する
",ITP1_8_C,groupA,mmk20
"次は例外に関する条件がある
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
Aを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aの末尾にBを追加する
何もしない
(0)からなる列の130回分の列を無限の整数列とする
Bを順にAとして、繰り返す
無限の整数列のA番目を1だけ増加させる
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、無限の整数列のA番目を出力する
",ITP1_8_C,groupA,yui_k
"空列をAとする
sysのstdinを順にAとして、繰り返す
Aの末尾にBを追加する
空文字列を間に入れてBを連結した文字列を英小文字に変換した文字列をAとする
Bのascii_lowercaseを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,ysk18_
"入力された文字列をAとする
97をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
AをBだけ増加させる
Bを英小文字に変換した文字列をAとする
0から26未満までの数列を順にAとして、繰り返す
BにCを加えた値をAとする
B内の、つまり文字コードCの文字の出現回数をAとする
文字コードAの文字、B、Cを出力する
繰り返しを中断する
",ITP1_8_C,groupA,shioshiooshio
"collectionsモジュールを用いる
空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
A内の、つまり空文字列を空白文字で置き換えた文字列
AのリストをAとする
Bを追加してAを拡張する
Bの辞書カウンタをAとする
97から97に26を加えた値未満までの数列を順にAとして、繰り返す
Aを(、つまり文字コードBの文字、Cの、つまり文字コードBの文字番目)の組で割った余りを出力する
",ITP1_8_C,groupA,HARU55
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字にBを加えた値にC内の、つまり文字コードAの文字の出現回数の文字列を加えた値を出力する
",ITP1_8_C,groupA,Will25
"0から26未満までの数列の各要素をBとし、0の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
Aを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aが96より大きくかつAが123より小さいとき、
AのBから97を引いた値番目を1だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、CのAから97を引いた値番目を出力する
",ITP1_8_C,groupA,tamamii20
"空列をAとする
空辞書をAとする
dict.fromkeys(list(B),0)をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
整数、Bを英小文字に変換した文字列をAとする
Aの末尾にBを追加する
繰り返しを中断する
Aをソートする
Bを順にAとして、繰り返す
Bを順にAとして、繰り返す
次は例外に関する条件がある
AのB番目を1だけ増加させる
何もしない
Cのキーと値の集まりを順にA、Bとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,tatejima
"(0)からなる列の26回分の列のリストをAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を英小文字に変換した文字列をAとする
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,ym09rr6
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
(B、C、D、E、F、G、H、I、J、K、L、M、N、O、P、Q、R、S、T、U、V、W、X、Y、Z、[)の組を順にAとして、繰り返す
A、B、C内のAの出現回数を出力する
",ITP1_8_C,groupA,kfwh87
"sysモジュールを用いる
stringモジュールを用いる
((A, Bのascii_lowercaseの各要素をAとし、0の列))からなる辞書を無限の整数列とする
sysのstdinから読み込んだデータを英小文字に変換した文字列を順にAとして、繰り返す
Aの全てが英小文字のとき、
無限の整数列のA番目に1を加えた値を無限の整数列のA番目にする
無限の整数列のキーと値の集まりを順にA、Bとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,meika
"空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Aの末尾にBを追加する
(B、C、D、E、F、G、H、I、J、K、L、M、N、O、P、Q、R、S、T、U、V、W、X、Y、Z、[)からなる列をAとする
空文字列を間に入れてBを連結した文字列をAとする
0から26未満までの数列を順にAとして、繰り返す
Aを書式としてBのC番目、D内のBのC番目の出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,Nakada065
"0を開いたファイルストリームをAとする
Aから読み込んだデータをAとする
BをAとする
(0)からなる列の26回分の列をAとする
Bを順にAとして、繰り返す
0からBの長さ未満までの数列を順にAとして、繰り返す
AがBのC番目と等しくまたはAがBのC番目を英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,Pooh0514
"空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列のリストをAとする
繰り返しを中断する
AにBを加えた値をAとする
collectionsモジュールを用いる
Bの辞書カウンタをAとする
stringモジュールを用いる
Bのascii_lettersをAとする
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、DのAの0にBを加えた値番目番目にDのAの26にBを加えた値番目番目を加えた値を出力する
",ITP1_8_C,groupA,udonman
"97から97に26を加えた値未満までの数列の各要素をBとし、、つまり文字コードBの文字の列をAとする
空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にD内のAのB番目の出現回数の文字列を加えた値を出力する
",ITP1_8_C,groupA,yuzukosyo
"0から26未満までの数列の各要素をBとし、0の列をAとする
BをAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCに含まれまたはAのB番目を英小文字に変換した文字列がCに含まれるとき、
AのBのCのD番目を英小文字に変換した文字列と等しい要素の最初の位置番目を1だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,Nanairo0716
"空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Bを英小文字に変換した文字列をAとする
BのリストをAとする
AをBだけ増加させる
繰り返しを中断する
Bの長さをAとする
空列をAとする
0からB未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aの末尾にBを追加する
97から123未満までの数列を順にAとして、繰り返す
A内のBの出現回数をネイピア数とする
ネイピア数が0と等しいとき、
""{} : 0""を出力する
""{} : {}""を出力する
",ITP1_8_C,groupA,hoshitaro32
"0から26未満までの数列の各要素をAとし、0の列を無限の整数列とする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26以下のとき、
無限の整数列のA番目を1だけ増加させる
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26以下のとき、
無限の整数列のA番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAにBの順序数を加えた値の文字、C、無限の整数列のA番目を出力する
",ITP1_8_C,groupA,lisa_06
"sysモジュールを用いる
空辞書をAとする
sysのstdinを順にAとして、繰り返す
Bを順にAとして、繰り返す
Aが全てアルファベットのとき、
Bを英小文字に変換した文字列をAとする
Aに対応する値、もし存在しなければB、0に1を加えた値をAのB番目にする
0から26未満までの数列を順にAとして、繰り返す
文字コードBの順序数にCを加えた値の文字をAとする
区切りなしでA、B、Cに対応する値、もし存在しなければA、0を出力する
",ITP1_8_C,groupA,miyu777
"stringモジュールを用いる
空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
Bを英小文字に変換した文字列をAとする
AにBを加えた値をAとする
繰り返しを中断する
Bのascii_lowercaseを順にAとして、繰り返す
B内のCの出現回数をAとする
Aを書式としてB、Cで整形した文字列を出力する
",ITP1_8_C,groupA,prprpr
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,mai0526
"入力された文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列の文字列だけ増加させる
繰り返しを中断する
整数、Bを英小文字に変換した文字列をAとする
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
0を無限の整数列とする
空白文字を代わりの行末として文字コードAの文字、Bを出力する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
AがBと等しいとき、
無限の整数列を1だけ増加させる
無限の整数列を出力する
",ITP1_8_C,groupA,giraffe09
"0から26未満までの数列の各要素をBとし、0の列をAとする
0から26未満までの数列の各要素をCとし、、つまり文字コードBの順序数にCを加えた値の文字の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Bを英小文字に変換した文字列をAとする
0から26未満までの数列を順にAとして、繰り返す
B内のCのD番目の出現回数をAとする
AのB番目をCだけ増加させる
0から26未満までの数列を順にAとして、繰り返す
""{} : {}""を出力する
繰り返しを中断する
",ITP1_8_C,groupA,maple13
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
Bを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,Kunitomo
"0から26未満までの数列の各要素をBとし、0の列のリストをAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
Aを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aが96より大きくかつAが123より小さいとき、
AのBから97を引いた値番目を1だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、CのAから97を引いた値番目を出力する
",ITP1_8_C,groupA,tom99
"0を開いたファイルストリームをAとする
Aから読み込んだデータをAとする
BをAとする
(0)からなる列の26回分の列をAとする
Bを順にAとして、繰り返す
0からBの長さ未満までの数列を順にAとして、繰り返す
AがBのC番目と等しくまたはAがBのC番目を英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,guoguo
"BをAとする
(0)からなる列の26回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列がCに含まれるとき、
AのBのCのD番目を英小文字に変換した文字列と等しい要素の最初の位置番目を1だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,kurumi048
"0から26未満までの数列の各要素をBとし、0の列のリストをAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
Bを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aが96より大きくかつAが123より小さいとき、
AのBから97を引いた値番目を1だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、CのAから97を引いた値番目を出力する
",ITP1_8_C,groupA,nabenabe0927
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列の文字列だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
空白文字を区切りとして文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,honoka46
"空文字列をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
何もしない
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
文字コードAの文字にBを加えた値にC内の、つまり文字コードAの文字の出現回数の文字列を加えた値を出力する
",ITP1_8_C,groupA,mai0321
"sysモジュールを用いる
空辞書をAとする
sysのstdinを順にAとして、繰り返す
Bを英小文字に変換した文字列のリストを順にAとして、繰り返す
Aに対応する値、もし存在しなければB、0に1を加えた値をAのB番目にする
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、Cに対応する値、もし存在しなければ、つまり文字コードAの文字、0を出力する
",ITP1_8_C,groupA,Lemon_1127
"sysモジュールを用いる
sysのstdinから読み込んだデータをAとする
整数、Bを英小文字に変換した文字列をAとする
Bを順にAとして、繰り返す
A、B、C内のAの出現回数を出力する
",ITP1_8_C,groupA,wonka3065
"BをAとする
(0)からなる列の26回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Aを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCに含まれるとき、
BのCのD番目と等しい要素の最初の位置をAとする
AのB番目を1だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,Hui0946
"sysモジュールを用いる
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列をAとする
(0)からなる列の26回分の列をAとする
BのリストをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
AのB番目を1だけ増加させる
Aを1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にDのB番目の文字列を加えた値を出力する
",ITP1_8_C,groupA,maih120615
"空文字列をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
入力された文字列をAとする
Aが、つまり空文字列と等しいとき、
繰り返しを中断する
AをBだけ増加させる
何もしない
(0)からなる列の26回分の列をAとする
Bを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数から97を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
Aを(、つまり文字コードBに97を加えた値の文字、CのB番目)の組で割った余りを出力する
",ITP1_8_C,groupA,kurumin212
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,okrn_cindy
"sysモジュールを用いる
stringモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
Bのascii_lowercaseを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,yukka_rinrin
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
BのリストをAとする
Bを順にAとして、繰り返す
B内のCの出現回数をAとする
""{} : {}""を出力する
",ITP1_8_C,groupA,ayk_rb_1103
"空文字列をAとする
(0)からなる列の26回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Bの文字列をAとする
Aを英小文字に変換した文字列をAとする
AをBだけ増加させる
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aが96より大きくかつAが123より小さいとき、
AのBから97を引いた値番目を1だけ増加させる
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、CのAから97を引いた値番目を出力する
",ITP1_8_C,groupA,momokai
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,kazari
"0から26未満までの数列の各要素をAとし、0の列を無限の整数列とする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を英小文字に変換した文字列を整数とする
繰り返しを中断する
0から、つまり整数の長さ未満までの数列を順にAとして、繰り返す
0から26未満までの数列を順にAとして、繰り返す
整数のA番目の順序数が97にBを加えた値と等しいとき、
無限の整数列のA番目を1だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,aoaoaoi
"sysモジュールを用いる
stringモジュールを用いる
((A, Bのascii_lowercaseの各要素をAとし、0の列))からなる辞書を無限の整数列とする
sysのstdinから読み込んだデータを英小文字に変換した文字列を順にAとして、繰り返す
Aの全てが英小文字のとき、
無限の整数列のA番目に1を加えた値を無限の整数列のA番目にする
無限の整数列のキーと値の集まりを順にA、Bとして、繰り返す
""{} : {}""を出力する
",ITP1_8_C,groupA,kori21
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,blackpinky
"0から26未満までの数列の各要素をBとし、0の列をAとする
BをAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しくまたはAがBを英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
繰り返しを中断する
Aを1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
Aを(BのC番目、DのC番目)の組で割った余りを出力する
",ITP1_8_C,groupA,arashi99
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,water0914
"0から26未満までの数列の各要素をBとし、0の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAにBの順序数を加えた値の文字、C、DのA番目を出力する
",ITP1_8_C,groupA,m1916075_
"空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
Bの順序数をAとする
Bの順序数をAとする
BからCに1を加えた値未満までの数列を順にAとして、繰り返す
Aを書式として、つまり文字コードBの文字、C内の、つまり文字コードBの文字の出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,akpinee
"sysモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
(0)からなる列の26回分の列をAとする
BをAとする
sysのstdinから読み込んだデータをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しくまたはAがBを英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
Aを1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
Aを(BのC番目、DのC番目)の組で割った余りを出力する
",ITP1_8_C,groupA,umnkit0922
"0から26未満までの数列の各要素をAとし、0の列を無限の整数列とする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26以下のとき、
無限の整数列のA番目を1だけ増加させる
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26以下のとき、
無限の整数列のA番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAにBの順序数を加えた値の文字、C、無限の整数列のA番目を出力する
",ITP1_8_C,groupA,ayame_1001
"空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
Aを英小文字に変換した文字列をAとする
Aの末尾にBを追加する
繰り返しを中断する
空文字列を間に入れてBを連結した文字列をAとする
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
A、B、C内のAの出現回数を出力する
",ITP1_8_C,groupA,KA1NA0913
"sysモジュールを用いる
(0)からなる列の26回分の列をAとする
BをAとする
sysのstdinから読み込んだデータをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しくまたはAがBを英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
繰り返しを中断する
Aを1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
Aを(BのC番目、DのC番目)の組で割った余りを出力する
",ITP1_8_C,groupA,blues11
"(0)からなる列の26回分の列をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
Aを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
97がAのB番目の順序数以下かどうかが122以下のとき、
AのBのC番目の順序数から97を引いた値番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAに97を加えた値の文字、B、CのA番目を出力する
",ITP1_8_C,groupA,kkk2m
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,Kureha
"sysモジュールを用いる
(0)からなる列の123回分の列をAとする
BをAとする
sysのstdinから読み込んだデータをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しくまたはAがBを英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
Aを1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,rt56
"空列をAとする
sysのstdinを順にAとして、繰り返す
Aの末尾にBを追加する
空文字列を間に入れてBを連結した文字列を英小文字に変換した文字列をAとする
Bのascii_lowercaseを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,horichan
"sysモジュールを用いる
(0)からなる列の26回分の列をAとする
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
Cの順序数からDの順序数に1を加えた値未満までの数列の各要素にBを適用した列を順にAとして、繰り返す
A、B、C内のAの出現回数を出力する
",ITP1_8_C,groupA,Shion20
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列だけ増加させる
繰り返しを中断する
0から26未満までの数列を順にAとして、繰り返す
Aを1だけ増加させる
",ITP1_8_C,groupA,s_68
"BをAとする
(0)からなる列の26回分の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCに含まれまたはAのB番目を英小文字に変換した文字列がCに含まれるとき、
0から26未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,yuyu268
"sysモジュールを用いる
空辞書をAとする
sysのstdinを順にAとして、繰り返す
Bを順にAとして、繰り返す
Aが全てアルファベットのとき、
Bを英小文字に変換した文字列をAとする
Aに対応する値、もし存在しなければB、0に1を加えた値をAのB番目にする
0から26未満までの数列を順にAとして、繰り返す
文字コードBの順序数にCを加えた値の文字をAとする
区切りなしでA、B、Cに対応する値、もし存在しなければA、0を出力する
",ITP1_8_C,groupA,shoko_a_
"空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
Bの順序数をAとする
Bの順序数をAとする
BからCに1を加えた値未満までの数列を順にAとして、繰り返す
Aを書式として、つまり文字コードBの文字、C内の、つまり文字コードBの文字の出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,ucacao33
"0から26未満までの数列の各要素をBとし、0の列のリストをAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
Bを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数をAとする
Aが96より大きくかつAが123より小さいとき、
AのBから97を引いた値番目を1だけ増加させる
繰り返しを中断する
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、CのAから97を引いた値番目を出力する
",ITP1_8_C,groupA,Shiori_Y
"空列をAとする
空列をAとする
空列をAとする
stringモジュールを用いる
Bのascii_lettersをAとする
collectionsモジュールを用いる
次は例外に関する条件がある
中断するまで、次を繰り返す
Aに入力された文字列のリストを加えた値をAとする
何もしない
Bの辞書カウンタをAとする
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にDのA[0+B]番目にDのA[26+B]番目を加えた値の文字列を加えた値を出力する
",ITP1_8_C,groupA,harapeco
"BをAとする
空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
Bを順にAとして、繰り返す
Aを書式としてB、C内のBの出現回数で整形した文字列を出力する
",ITP1_8_C,groupA,gon35
"sysモジュールを用いる
空列をAとする
sysのstdinから読み込んだ行の列を順にAとして、繰り返す
Aの末尾にBの末尾から空白改行を取り除いた文字列を追加する
空文字列を間に入れてBを連結した文字列をAとする
整数、Bを英小文字に変換した文字列をAとする
Bを順にAとして、繰り返す
B内のCの出現回数をAとする
""{} : {}""を出力する
",ITP1_8_C,groupA,hamuhamu12
"sysモジュールを用いる
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列をAとする
(0)からなる列の26回分の列をAとする
BのリストをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
AのB番目を1だけ増加させる
Aを1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にDのB番目の文字列を加えた値を出力する
",ITP1_8_C,groupA,ss10225_
"空文字列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列だけ増加させる
繰り返しを中断する
Bを順にAとして、繰り返す
A、B、C内のAの出現回数を出力する
",ITP1_8_C,groupA,ai0322
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,natsuki0804
"sysモジュールを用いる
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列をAとする
(0)からなる列の26回分の列をAとする
BのリストをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
AのB番目を1だけ増加させる
Aを1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にDのB番目の文字列を加えた値を出力する
",ITP1_8_C,groupA,miiyu
"0から26未満までの数列の各要素をBとし、0の列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列をAとする
繰り返しを中断する
整数、Bを英小文字に変換した文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目の順序数からDの順序数を引いた値をAとする
Aが0以上かつAが26より小さいとき、
AのB番目を1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
文字コードAにBの順序数を加えた値の文字、C、DのA番目を出力する
",ITP1_8_C,groupA,matsuki20
"sysモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
(0)からなる列の26回分の列をAとする
BをAとする
sysのstdinから読み込んだデータをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しくまたはAがBを英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
繰り返しを中断する
Aを1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
Aを(BのC番目、DのC番目)の組で割った余りを出力する
",ITP1_8_C,groupA,tokkankoji
"空列をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を整数とする
繰り返しを中断する
最初からもう一度、繰り返す
整数が、つまり空文字列と等しいとき、
繰り返しを中断する
整数を英小文字に変換した文字列をAとする
Aの末尾にBを追加する
空文字列を間に入れてBを連結した文字列をAとする
Bを順にAとして、繰り返す
B内のCの出現回数をAとする
A、B、Cを出力する
",ITP1_8_C,groupA,mh21716087
"空列をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
Aの末尾に入力された文字列を追加する
何もしない
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列をAのB番目にする
空白文字を間に入れてBを連結した文字列をAとする
Bを順にAとして、繰り返す
A、B、C内のAの出現回数を出力する
",ITP1_8_C,groupA,bono2325
"sysモジュールを用いる
空辞書をAとする
sysのstdinを順にAとして、繰り返す
Bを順にAとして、繰り返す
Aが全てアルファベットのとき、
Bを英小文字に変換した文字列をAとする
Aに対応する値、もし存在しなければB、0に1を加えた値をAのB番目にする
0から26未満までの数列を順にAとして、繰り返す
文字コードBの順序数にCを加えた値の文字をAとする
""{} : {}""を出力する
",ITP1_8_C,groupA,konkon666
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
文字コードAの文字、B、C内の、つまり文字コードAの文字の出現回数を出力する
",ITP1_8_C,groupA,nanako1116
"0を開いたファイルストリームをAとする
Aから読み込んだデータをAとする
BをAとする
(0)からなる列の26回分の列をAとする
Bを順にAとして、繰り返す
0からBの長さ未満までの数列を順にAとして、繰り返す
AがBのC番目と等しくまたはAがBのC番目を英大文字に変換した文字列と等しいとき、
AのB番目を1だけ増加させる
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目、C、DのB番目を出力する
",ITP1_8_C,groupA,sugarchan0
"sysモジュールを用いる
空列をAとする
sysのstdinから読み込んだ行の列を順にAとして、繰り返す
Aの末尾にBの末尾から空白改行を取り除いた文字列を追加する
空文字列を間に入れてBを連結した文字列をAとする
整数、Bを英小文字に変換した文字列をAとする
Bを順にAとして、繰り返す
B内のCの出現回数をAとする
""{} : {}""を出力する
",ITP1_8_C,groupA,okashi77
"sysモジュールを用いる
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列をAとする
(0)からなる列の26回分の列をAとする
BのリストをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
AのB番目を1だけ増加させる
Aを1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にDのB番目の文字列を加えた値を出力する
",ITP1_8_C,groupA,Shino107
"sysモジュールを用いる
空辞書をAとする
sysのstdinを順にAとして、繰り返す
Bを英小文字に変換した文字列のリストを順にAとして、繰り返す
Bの順序数からCの順序数に1を加えた値未満までの数列を順にAとして、繰り返す
",ITP1_8_C,groupA,aoi_0326
"sysモジュールを用いる
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列をAとする
(0)からなる列の26回分の列をAとする
BのリストをAとする
Bを順にAとして、繰り返す
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
AのB番目を1だけ増加させる
Aを1だけ増加させる
0から26未満までの数列を順にAとして、繰り返す
AのB番目にCを加えた値にDのB番目の文字列を加えた値を出力する
",ITP1_8_C,groupA,yuuu197
"sysモジュールを用いる
sysのstdinから読み込んだデータを英小文字に変換した文字列をAとする
97から123未満までの数列を順にAとして、繰り返す
",ITP1_8_C,groupA,yamamotokotoha
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,jakenu0x5e
"識別子がAと等しいとき、
入力された文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aの末尾にBを英小文字に変換した文字列を追加する
0をAとする
Bを順にAとして、繰り返す
Bを空白文字で分割した字句列を順にAとして、繰り返す
AがBを英小文字に変換した文字列と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,kichi941
"入力された文字列を英小文字に変換した文字列をAとする
空列をAとする
入力された文字列をAとする
AがBと等しくない間、次を繰り返す
AをBを英小文字に変換した文字列を空白で分割した字句列だけ増加させる
入力された文字列をAとする
Bの各要素をAとし、AがCと等しいときのAの列の長さを出力する
",ITP1_9_A,groupA,cima
"入力された文字列をAとする
空列をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Aの末尾にBを追加する
空白文字を間に入れてBを連結した文字列をAとする
Bを空白で分割した字句列をAとする
A内のBの出現回数を出力する
",ITP1_9_A,groupA,novel
"入力された文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
AをBを英小文字に変換した文字列を空白で分割した字句列だけ増加させる
A内のBの出現回数を出力する
",ITP1_9_A,groupA,tricom
"sysモジュールを用いる
入力された文字列を英小文字に変換した文字列をAとする
0を無限の整数列とする
sysのstdinを順にAとして、繰り返す
無限の整数列をBを英小文字に変換した文字列を空白で分割した字句列の各要素をAとし、AがCと等しいときの1の列の総和だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,tige
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを空白で分割した字句列のリストをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
整数、AのB番目を英小文字に変換した文字列が、つまり整数、Cを英小文字に変換した文字列と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,KubotaNoriko1230
"空文字列をAとする
input().casefold()をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBに空白文字を加えた値だけ増加させる
Bを空白で分割した字句列の各要素をAとし、A.casefold()がCと等しいときの1の列の総和を出力する
",ITP1_9_A,groupA,pypy
"input().casefold()をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
A.casefold()をAとする
Bを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,bs5lNkJ
"sysモジュールを用いる
入力された文字列をAとする
sys.stdinから読み込んだデータを英小文字に変換した文字列を空白で分割した字句列内のAの出現回数を出力する
",ITP1_9_A,groupA,kyuna
"入力された文字列、0をA、無限の整数列とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
無限の整数列をAを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,ikatakos
"入力された文字列をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列を空白で分割した字句列をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
無限の整数列を1だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,manaka
"osのenvironに対応する値、もし存在しなければBをAとする
AがBと等しいとき、
A、Bを開いたファイルストリームをsysのstdinにする
入力された文字列の両端から空白改行を取り除いた文字列を英小文字に変換した文字列をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
入力された文字列の両端から空白改行を取り除いた文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
無限の整数列をA内のBの出現回数だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,RandyWaterhouse
"識別子がAと等しいとき、
0をAとする
入力された文字列をAとする
真の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをCの両端からDを取り除いた文字列を英小文字に変換した文字列を空白で分割した字句列の各要素にwをパラメータとしてwがBと等しいかどうかを返す関数を適用した列の総和だけ増加させる
""{}""を出力する
",ITP1_9_A,groupA,yoheikikuta
"入力された文字列をAとする
空列をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列をAとする
AがBに含まれるとき、
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列をAのB番目にする
無限の整数列をA内のBの出現回数だけ増加させる
空列をAとする
無限の整数列を出力する
",ITP1_9_A,groupA,tsuru_aji
"入力された文字列をAとする
空列をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
AをBを英小文字に変換した文字列を空白で分割した字句列だけ増加させる
0を無限の整数列とする
Bを順にAとして、繰り返す
AがBと等しいとき、
無限の整数列を出力する
",ITP1_9_A,groupA,bonoron
"sysモジュールを用いる
入力された文字列をAとする
sysのstdinから読み込んだデータを英小文字に変換した文字列を空白で分割した字句列をAとする
A内のBの出現回数を出力する
",ITP1_9_A,groupA,Mackie
"2
3
入力された文字列をAとする
空文字列をAとする
入力された文字列をAとする
AがBと等しくない間、次を繰り返す
AをBに改行文字を加えた値だけ増加させる
入力された文字列をAとする
Aから始まりB間隔で続く無限の整数列を出力する
識別子がAと等しいとき、
run()
",ITP1_9_A,groupA,y1721
"sysモジュールを用いる
osモジュールを用いる
入力された文字列の両端から空白改行を取り除いた文字列を英小文字に変換した文字列をAとする
0をAとする
sysのstdinを順にAとして、繰り返す
Aを英小文字に変換した文字列をAとする
Bを空白で分割した字句列を順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,peroon
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
Aを入力された文字列を英小文字に変換した文字列を空白で分割した字句列内のBの出現回数だけ増加させる
繰り返しを中断する
Aを出力する
",ITP1_9_A,groupA,leeav_ten
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,momiji6
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列を空白文字で分割した字句列をAとする
Aの0番目がBと等しいとき、
Aを出力する
繰り返しを中断する
Bの長さをAとする
0からB未満までの数列を順にAとして、繰り返す
Aの整数値をAとする
AのB番目を英小文字に変換した文字列がCと等しいとき、
AをBのC番目を英小文字に変換した文字列内のDの出現回数だけ増加させる
最初からもう一度、繰り返す
",ITP1_9_A,groupA,meiadayz
"入力された文字列をAとする
0をAとする
空列をAとする
Aが0と等しい間、次を繰り返す
入力された文字列を空白で分割した字句列をAとする
Aが(B)からなる列と等しくないとき、
Bの長さをAとする
0からB未満までの数列を順にAとして、繰り返す
Aの末尾にBのC番目を追加する
1をAとする
0を無限の整数列とする
Bの長さをAとする
0からB未満までの数列を順にAとして、繰り返す
AのB番目を英大文字に変換した文字列がCを英大文字に変換した文字列と等しいとき、
無限の整数列を1だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,yreb
"reモジュールを用いる
入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列を正規表現Bで分割した文字列リストをAとする
Aの0番目がBと等しいとき、
繰り返しを中断する
Bを順にAとして、繰り返す
Aを英小文字に変換した文字列をAとする
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,misuta
"入力された文字列をAとする
0をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,baron2
"入力された文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
Aの末尾にBを英小文字に変換した文字列を追加する
0をAとする
Bを順にAとして、繰り返す
Bを空白文字で分割した字句列を順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,mxg7y
"入力された文字列を英小文字に変換した文字列をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
無限の整数列をAを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,rockbirds12
"入力された文字列をAとする
空列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを空白文字で分割した字句列をAとする
Bを順にAとして、繰り返す
Aを英小文字に変換した文字列がBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,zywuwen
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Aを空白で分割した字句列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,tefu417
"入力された文字列をAとする
0を無限の整数列とする
iter(input,B)を順にAとして、繰り返す
無限の整数列をBを英小文字に変換した文字列を空白文字で分割した字句列の各要素をAとし、AがCと等しいときのAの列の長さだけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,halfpennyworths
"入力された文字列を英小文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aに空白文字を加えた値をAとする
Aの末尾にBを追加する
空文字列を間に入れてAを連結した文字列を英小文字に変換した文字列をAとする
Aを空白で分割した字句列をAとする
A内のBの出現回数を出力する
",ITP1_9_A,groupA,shana
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
Aを出力する
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
",ITP1_9_A,groupA,nananashi
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,rune
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,PythonHolic
"入力された文字列をAとする
0を無限の整数列とする
空列をAとする
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列をAとする
Aの0番目がBと等しいとき、
繰り返しを中断する
Bを順にAとして、繰り返す
Aの末尾にBを追加する
Bを順にAとして、繰り返す
Aを英小文字に変換した文字列がBと等しいとき、
無限の整数列を1だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,soutatahara
"入力された文字列を英小文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Aが(B)からなる列と等しいとき、
繰り返しを中断する
Bを順にAとして、繰り返す
Aの末尾にBを英小文字に変換した文字列を追加する
A内のBの出現回数を出力する
",ITP1_9_A,groupA,tappinasa
"sysモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
入力された文字列の文字列を英大文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
AをBで割った余りを出力する
",ITP1_9_A,groupA,naoto172
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,Sim0000
"入力された文字列を英小文字に変換した文字列をAとする
空文字列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列に空白文字を加えた値だけ増加させる
Aを空白で分割した字句列のリストをAとする
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,toyuzuko
"入力された文字列をAとする
0をAとする
空列をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Aが(B)からなる列と等しくない間、次を繰り返す
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列をAのB番目にする
Aの末尾にBを追加する
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
0からBのC番目の長さ未満までの数列を順にAとして、繰り返す
AのB番目のC番目がDと等しいとき、
Aに1を加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,jj1guj
"sysモジュールを用いる
入力された文字列を英小文字に変換した文字列をAとする
sysのstdinから読み込んだデータをAとする
Bの、つまり先頭からBの先頭からCを探して見つかった位置までの部分列を英小文字に変換した文字列を空白で分割した字句列をAとする
A内のBの出現回数を出力する
",ITP1_9_A,groupA,nut5ch3st
"入力された文字列をAとする
Bの長さをAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Bを空白文字で分割した字句列をAとする
Aの末尾にBを追加する
Bの長さをAとする
0を無限の整数列とする
0からB未満までの数列を順にAとして、繰り返す
BのC番目をAとする
Bの長さをAとする
0からB未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
無限の整数列を1だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,Pure70os
"入力された文字列を英大文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英大文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,nagasw0603
"空列をAとする
入力された文字列を整数とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
AをBだけ増加させる
A内の、つまり整数の出現回数を出力する
",ITP1_9_A,groupA,yunakura
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
Bを英大文字に変換した文字列を空白で分割した字句列をAとする
AがBと等しいとき、
繰り返しを中断する
AをB内のCの出現回数だけ増加させる
何もしない
Aを出力する
",ITP1_9_A,groupA,proayu33
"入力された文字列をAとする
0の整数値をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Aを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,aaa119
"0をAとする
入力された文字列をAとする
中断するまで、次を繰り返す
空列をAとする
入力された文字列を空白で分割した字句列のリストをAとする
Aの先頭がBと等しいとき、
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
Aの末尾にBのC番目を英小文字に変換した文字列を追加する
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,mimimi323
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,myst7
"入力された文字列の文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英大文字に変換した文字列をAとする
Aを英大文字に変換した文字列をAとする
AをBを空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,roy2020
"0をAとする
入力された文字列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBに含まれるとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Aを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,decodeco
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,rei089
"入力された文字列をAとする
0をAとする
次は例外に関する条件がある
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列のリストをAとする
Bの長さをAとする
0からB未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
繰り返しを中断する
BのC番目を英小文字に変換した文字列をAとする
AがBと等しいとき、
Aを1だけ増加させる
何もしない
Aを出力する
",ITP1_9_A,groupA,mokomoko58
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBに含まれるとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Aを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,mayu_build_01
"入力された文字列をAとする
Aを英大文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英大文字に変換した文字列をAとする
Aを空白で分割した字句列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,sh415
"reモジュールを用いる
0をAとする
0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,gem19
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Aを空白で分割した字句列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,jngkk97
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,mio0103
"sysモジュールを用いる
入力された文字列をAとする
sys.stdinから読み込んだデータを英小文字に変換した文字列を空白で分割した字句列内のAの出現回数を出力する
",ITP1_9_A,groupA,oreo0320
"入力された文字列の文字列をAとする
BのリストをAとする
Aの末尾に空白文字を追加する
Aの0に空白文字を挿入する
Bを英大文字に変換した文字列のリストをAとする
Aの末尾に空白文字を追加する
Aの0に空白文字を挿入する
0をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
何もしない
BのリストをAとする
Aの末尾に空白文字を追加する
Aの0に空白文字を挿入する
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCの0番目と等しくまたはAのB番目がDの先頭と等しいとき、
AにBの長さを加えた値がCの長さより大きいとき、
繰り返しを中断する
0からBの長さ未満までの数列を順にAとして、繰り返す
0をAとする
AのBにCを加えた値番目がDのC番目と等しくなくかつAのBにCを加えた値番目がEのC番目と等しくないとき、
繰り返しを中断する
Aを1だけ増加させる
AをBだけ増加させる
Aを出力する
",ITP1_9_A,groupA,kinako_shinonome
"sysモジュールを用いる
入力された文字列をAとする
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数を出力する
",ITP1_9_A,groupA,obrm2k
"0をAとする
入力された文字列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
Bを英小文字に変換した文字列を空白で分割した字句列をAとする
Aのリスト
AがBと等しいとき、
繰り返しを中断する
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,Aliceandkumasan
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,kyk_hm_99
"入力された文字列をAとする
入力された文字列をAとする
空列をAとする
AがBと等しくない間、次を繰り返す
Aを英小文字に変換した文字列をAとする
AをBを空白で分割した字句列のリストだけ増加させる
入力された文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
B内のCの出現回数をAとする
Aを出力する
",ITP1_9_A,groupA,iori125
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AをBだけ増加させる
Aを出力する
",ITP1_9_A,groupA,moeknm
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,snoopea
"入力された文字列をAとする
空列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
Aに1を加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,yuko0828
"入力された文字列の文字列をAとする
Aを英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,artms007
"入力された文字列を英大文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,mmk20
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英大文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
Aの末尾にB内のCの出現回数を追加する
Aの総和を出力する
",ITP1_9_A,groupA,yui_k
"入力された文字列、0をA、無限の整数列とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
無限の整数列をAを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,ysk18_
"入力された文字列をAとする
Bを英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,shioshiooshio
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列を空白で分割した字句列をAとする
AがBに含まれるとき、
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,HARU55
"入力された文字列をAとする
Bを英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
Bを英小文字に変換した文字列をAとする
BをAとする
AがBと等しいとき、
繰り返しを中断する
Bを空白で分割した字句列をAとする
B内のCの出現回数をAとする
AをBだけ増加させる
Aを出力する
",ITP1_9_A,groupA,bn1224
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,Will25
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,tamamii20
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
Bを英小文字に変換した文字列をAとする
Bを空白文字で分割した字句列をAとする
B内のCの出現回数をAとする
AがBと等しいとき、
繰り返しを中断する
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,ym09rr6
"入力された文字列をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列を空白文字で分割した字句列をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
無限の整数列を1だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,kfwh87
"A内のBの出現回数を出力する
",ITP1_9_A,groupA,honot
"入力された文字列の文字列を英大文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,meika
"入力された文字列の文字列をAとする
Bを英小文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
Aを英小文字に変換した文字列をネイピア数とする
ネイピア数を空白文字で分割した字句列をAとする
AがBと等しいとき、
繰り返しを中断する
Aの末尾にBを追加する
空列をAとする
Bを順にAとして、繰り返す
Bを順にAとして、繰り返す
Aの末尾にBを追加する
A内のBの出現回数を出力する
",ITP1_9_A,groupA,Nakada065
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを空白で分割した字句列のリストをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
整数、AのB番目を英小文字に変換した文字列が、つまり整数、Cを英小文字に変換した文字列と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,Pooh0514
"入力された文字列の文字列をAとする
入力された文字列を空白で分割した字句列のリストをAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列の文字列をAとする
AがBと等しくないとき、
Aを空白で分割した字句列をAとする
BにAを加えた値をAとする
繰り返しを中断する
0を無限の整数列とする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列をAのB番目にする
AのB番目がCと等しいとき、
無限の整数列を1だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,udonman
"0をAとする
入力された文字列の文字列をAとする
Bを英小文字に変換した文字列をAとする
Bを英大文字に変換した文字列をAとする
BのリストをAとする
空列をAとする
BのリストをAとする
空列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英大文字に変換した文字列をAのB番目にする
AのBから1を引いた値番目を英小文字に変換した文字列をAのBから1を引いた値番目にする
空文字列を間に入れてBを連結した文字列をAとする
Aの末尾にBを追加する
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列をAのB番目にする
AのBから1を引いた値番目を英大文字に変換した文字列をAのBから1を引いた値番目にする
空文字列を間に入れてBを連結した文字列をAとする
Aの末尾にBを追加する
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を空白で分割した字句列のリストをAとする
AをB内のCの出現回数だけ増加させる
AをB内のCの出現回数だけ増加させる
Aの長さが2以上のとき、
0からBの長さ未満までの数列を順にAとして、繰り返す
AをB内のCのD番目の出現回数だけ増加させる
Aの長さが2以上のとき、
0からBの長さ未満までの数列を順にAとして、繰り返す
AをB内のCのD番目の出現回数だけ増加させる
繰り返しを中断する
Aを出力する
",ITP1_9_A,groupA,salmon04
"入力された文字列を英大文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英大文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,yuzukosyo
"0をAとする
入力された文字列をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Bを空白で分割した字句列のリストをAとする
AにB内のCの出現回数を加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,phantom_0422
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを空白で分割した字句列のリストをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列がCと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,Nanairo0716
"入力された文字列をAとする
Bを英大文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英大文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
AをBだけ増加させる
B内のCの出現回数をAとする
Aを出力する
",ITP1_9_A,groupA,hoshitaro32
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,lisa_06
"sysモジュールを用いる
osモジュールを用いる
入力された文字列の両端から空白改行を取り除いた文字列を英小文字に変換した文字列をAとする
0をAとする
sysのstdinを順にAとして、繰り返す
Aを英小文字に変換した文字列をAとする
Bを空白で分割した字句列を順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,miyu777
"入力された文字列をAとする
Aを英小文字に変換した文字列をAとする
空文字列をAとする
0から1000未満までの数列を順にAとして、繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Aに空白文字を加えた値にBを加えた値をAとする
Bを空白で分割した字句列をAとする
B内のCの出現回数をAとする
Aを出力する
",ITP1_9_A,groupA,prprpr
"入力された文字列を英小文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数をAとする
Aの末尾にBを追加する
Aの総和を出力する
",ITP1_9_A,groupA,mai0526
"入力された文字列の文字列をAとする
整数、Bを英大文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
整数、Bを英大文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
AがBと等しいとき、
繰り返しを中断する
B内のCの出現回数をAとする
Aの末尾にBを追加する
Aの総和を出力する
",ITP1_9_A,groupA,giraffe09
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
Aを出力する
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
B内のCの出現回数をAとする
AをBだけ増加させる
",ITP1_9_A,groupA,maple13
"入力された文字列の文字列をAとする
0をAとする
1の間、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,Kunitomo
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを空白で分割した字句列のリストをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
整数、AのB番目を英小文字に変換した文字列が、つまり整数、Cを英小文字に変換した文字列と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,tom99
"入力された文字列をAとする
次は例外に関する条件がある
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Aを空白文字で分割した字句列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AがBのC番目と等しいとき、
Aを1だけ増加させる
何もしない
Aを出力する
",ITP1_9_A,groupA,guoguo
"input().casefold()をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
A.casefold()をAとする
Bを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,kurumi048
"sysモジュールを用いる
入力された文字列をAとする
sys.stdinから読み込んだデータを英小文字に変換した文字列を空白で分割した字句列内のAの出現回数を出力する
",ITP1_9_A,groupA,nabenabe0927
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,honoka46
"入力された文字列をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
無限の整数列をAを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,mai0321
"入力された文字列をAとする
Aを英小文字に変換した文字列
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Cを空白で分割した字句列の各要素をBとし、Bを英小文字に変換した文字列の列を追加してAを拡張する
A内のBの出現回数を出力する
",ITP1_9_A,groupA,Lemon_1127
"入力された文字列の文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,wonka3065
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
AをBを空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,Hui0946
"sysモジュールを用いる
入力された文字列をAとする
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数を出力する
",ITP1_9_A,groupA,maih120615
"入力された文字列を英大文字に変換した文字列の文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,kurumin212
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,okrn_cindy
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,yukka_rinrin
"0をAとする
入力された文字列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,ayk_rb_1103
"入力された文字列の文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,momokai
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを空白で分割した字句列のリストをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
整数、AのB番目を英小文字に変換した文字列が、つまり整数、Cを英小文字に変換した文字列と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,kazari
"sysモジュールを用いる
入力された文字列をAとする
sys.stdinから読み込んだデータを英小文字に変換した文字列を空白で分割した字句列内のAの出現回数を出力する
",ITP1_9_A,groupA,Haru157
"入力された文字列を英大文字に変換した文字列をAとする
0をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英大文字に変換した文字列を空白で分割した字句列をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,aoaoaoi
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,kori21
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,blackpinky
"入力された文字列の文字列を英大文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
AをBで割った余りを出力する
",ITP1_9_A,groupA,arashi99
"入力された文字列の文字列を英大文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,m1916075_
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,akpinee
"sysモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
入力された文字列の文字列を英大文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
0をAとする
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
AをBで割った余りを出力する
",ITP1_9_A,groupA,umnkit0922
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,ayame_1001
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,KA1NA0913
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,blues11
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,stk95
"0をAとする
入力された文字列をAとする
Aを英小文字に変換した文字列をAとする
入力された文字列をAとする
AがBと等しくない間、次を繰り返す
Aを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AがBのC番目と等しいとき、
Aを1だけ増加させる
入力された文字列をAとする
Aを出力する
",ITP1_9_A,groupA,kkk2m
"入力された文字列の文字列を英大文字に変換した文字列をAとする
空列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,rt56
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,ltwx4649
"入力された文字列をAとする
空列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
Aに1を加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,horichan
"入力された文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列だけ増加させる
A内のBの出現回数を出力する
",ITP1_9_A,groupA,Shion20
"整数、入力された文字列を英小文字に変換した文字列をAとする
Bの長さをAとする
Aが10以下のとき、
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aの長さが1000以下のとき、
整数、Aを英小文字に変換した文字列をAとする
Aを空白で分割した字句列をAとする
B内のCの出現回数をAとする
AをBだけ増加させる
Aを出力する
",ITP1_9_A,groupA,s_68
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を空白で分割した字句列をAとする
AがBと等しいとき、
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目を英小文字に変換した文字列をAのB番目にする
AがBのC番目と等しいとき、
Aを出力する
",ITP1_9_A,groupA,yuyu268
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
1の間、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,shoko_a_
"input().casefold()をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
A.casefold()をAとする
Bを空白で分割した字句列をAとする
無限の整数列をA内のBの出現回数だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,dice37
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列をAとする
AをBを空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,ucacao33
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを空白で分割した字句列のリストをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
整数、AのB番目を英小文字に変換した文字列が、つまり整数、Cを英小文字に変換した文字列と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,Shiori_Y
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列のリストをAとする
Aが(B)からなる列と等しいとき、
繰り返しを中断する
Bを順にAとして、繰り返す
Aを英小文字に変換した文字列がBを英小文字に変換した文字列と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,asdfghqwerty
"入力された文字列の文字列を英大文字に変換した文字列をAとする
空列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
Bを順にAとして、繰り返す
AがBと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,gon35
"sysモジュールを用いる
入力された文字列をAとする
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数を出力する
",ITP1_9_A,groupA,ss10225_
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列をAとする
Bを空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,miyh2523
"入力された文字列の文字列をAとする
空列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列だけ増加させる
A内のBの出現回数を出力する
",ITP1_9_A,groupA,ai0322
"入力された文字列をAとする
入力された文字列をAとする
空列をAとする
AがBと等しくない間、次を繰り返す
Aを英小文字に変換した文字列をAとする
AをBを空白で分割した字句列のリストだけ増加させる
入力された文字列をAとする
0をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,natsuki0804
"sysモジュールを用いる
入力された文字列をAとする
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数を出力する
",ITP1_9_A,groupA,miiyu
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
整数、Bを英小文字に変換した文字列をAとする
AがBと等しいとき、
Bを空白で分割した字句列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
AのB番目がCと等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,matsuki20
"sysモジュールを用いる
0の整数値をAとする
空列をAとする
入力された文字列を英大文字に変換した文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英大文字に変換した文字列を空白で分割した字句列だけ増加させる
Bを順にAとして、繰り返す
AがBと等しいとき、
Aに1を加えた値をAとする
Aの整数値を出力する
",ITP1_9_A,groupA,tokkankoji
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,mh21716087
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,jwu37
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,crescent_moon
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,apple05
"入力された文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを空白で分割した字句列のリストをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
整数、AのB番目を英小文字に変換した文字列が、つまり整数、Cを英小文字に変換した文字列と等しいとき、
Aを1だけ増加させる
Aを出力する
",ITP1_9_A,groupA,konkon666
"入力された文字列を英大文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英大文字に変換した文字列を空白で分割した字句列をAとする
AをB内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,me72
"0をAとする
入力された文字列の文字列をAとする
中断するまで、次を繰り返す
入力された文字列の文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Aを英小文字に変換した文字列を空白で分割した字句列をAとする
B内のCの出現回数をAとする
AにBを加えた値をAとする
Aを出力する
",ITP1_9_A,groupA,mao0615
"入力された文字列を英小文字に変換した文字列をAとする
空列をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
Bを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数をAとする
Aの末尾にBを追加する
Aの総和を出力する
",ITP1_9_A,groupA,nanako1116
"入力された文字列をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
繰り返しを中断する
無限の整数列をAを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数だけ増加させる
無限の整数列を出力する
",ITP1_9_A,groupA,sugarchan0
"sysモジュールを用いる
入力された文字列をAとする
sys.stdinから読み込んだデータを英小文字に変換した文字列を空白で分割した字句列内のAの出現回数を出力する
",ITP1_9_A,groupA,sabuk421
"sysモジュールを用いる
入力された文字列をAとする
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数を出力する
",ITP1_9_A,groupA,Shino107
"入力された文字列を英小文字に変換した文字列をAとする
0をAとする
中断するまで、次を繰り返す
入力された文字列をAとする
AがBと等しいとき、
AをBを英小文字に変換した文字列を空白で分割した字句列内のCの出現回数だけ増加させる
Aを出力する
",ITP1_9_A,groupA,aoi_0326
"sysモジュールを用いる
入力された文字列をAとする
sysのstdinから読み込んだデータをAとする
Aを英小文字に変換した文字列を空白で分割した字句列内のBの出現回数を出力する
",ITP1_9_A,groupA,yuuu197
"入力された文字列を英小文字に変換した文字列をAとする
空列をAとする
入力された文字列をAとする
AがBと等しくない間、次を繰り返す
AをBを英小文字に変換した文字列を空白で分割した字句列だけ増加させる
入力された文字列をAとする
Bの各要素をAとし、AがCと等しいときのAの列の長さを出力する
",ITP1_9_A,groupA,yamamotokotoha
"Aが0と等しいとき、
(A、B)の組を返す
euclid_gcd(A,B%A,C+1)を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
繰り返しを中断する
A、Bの最大値、A、Bの最小値をA、Bとする
euclid_gcd(A,B,0)を展開してを出力する
",0197,groupB,kuwaaaaaaaaaaaaaaaaa
"sysモジュールを用いる
sysモジュールを用いる
Aから読み込んだ一行を入力された文字列とする
0を無限の整数列とする
AがBより大きいとき、
C、DをA、Bとする
C、DをA、Bとする
1をAとする
Aの間、次を繰り返す
BをCで割った余りをAとする
BをAとする
AとBを入れ替える
無限の整数列を1だけ増加させる
(A、無限の整数列)の組を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
solve(B,C)を展開し、それぞれA、無限の整数列とする
A、無限の整数列を出力する
識別子がAと等しいとき、
main(sys.argv[1:])
",0197,groupB,kichi941
"0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを1だけ増加させる
(A、B)からなる列を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより小さいとき、
BとCの最大公約数をAとする
Aを展開してを出力する
",0197,groupB,bal4u
"0をAとする
A、Bを出力する
1の間、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより大きいときAとBの最大公約数、そうでなければBとAの最大公約数
",0197,groupB,cima
"1の間、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
B、Cの最大値をAとする
B、Cの最小値をAとする
0をAとする
1の間、次を繰り返す
Aを1だけ増加させる
BをCで割った余りをAとする
B、CをA、Bとする
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,novel
"0をAとする
AがBより小さいとき、
AとBを入れ替える
Aの間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
(A、B)の組を返す
sysモジュールを用いる
sysのstdinをAとする
中断するまで、次を繰り返す
Cから読み込んだ一行を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
繰り返しを中断する
euclidean_algorithm(A,B)を展開してを出力する
",0197,groupB,tige
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,KubotaNoriko1230
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
AがBより小さいとき、
0をAとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余り、Cに1を加えた値をA、B、Cとする
A、Bを出力する
",0197,groupB,pypy
"sysモジュールを用いる
BをAとする
空文字列をAとする
中断するまで、次を繰り返す
Cから読み込んだ一行を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
1をAとする
AをBで割った余りが0と等しくない間、次を繰り返す
Aを1だけ増加させる
B、AをBで割った余りをA、Bとする
Aを""{} {}\n""だけ増加させる
改行せずにAを出力する
solve()
",0197,groupB,bs5lNkJ
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素をAとし、Aの整数値の列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
AがBより大きいとき、
AとBを入れ替える
中断するまで、次を繰り返す
Aを1だけ増加させる
AをBで割った余りをAとする
AとBを入れ替える
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,manaka
"osのenvironに対応する値、もし存在しなければBをAとする
AがBと等しいとき、
A、Bを開いたファイルストリームをsysのstdinにする
AがBより小さいとき、
AとBを入れ替える
0をAとする
0、1をA、Bとする
1、0をA、Bとする
C、DをA、Bとする
Aが0と等しくない間、次を繰り返す
Aを1だけ増加させる
BをCで割った商をAとする
B、AからCにBを掛けた値を引いた値をA、Bとする
B、AからCにBを掛けた値を引いた値をA、Bとする
B、AからCにBを掛けた値を引いた値をA、Bとする
(A、B)の組を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
extended_gcd(C,D)を展開し、それぞれA、Bとする
A、Bを出力する
",0197,groupB,RandyWaterhouse
"datetimeモジュールを用いる
1の間、次を繰り返す
0をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
繰り返しを中断する
AがBより大きいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,tsuru_aji
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,doorgod
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列をソートした列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
0をAとする
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,leeav_ten
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
A、Bの最大値、A、Bの最小値をA、Bとする
0をAとする
中断するまで、次を繰り返す
Aを1だけ増加させる
AをBで割った余りをAとする
AとBを入れ替える
Aが0と等しいとき、
A、Bを出力する
",0197,groupB,meiadayz
"0をAとする
Aが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを1だけ増加させる
(A、B)からなる列を返す
1の間、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
繰り返しを中断する
A、Bの最大値、A、Bの最小値をA、Bとする
AとBの最大公約数を展開してを出力する
",0197,groupB,baron2
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
繰り返しを中断する
AがB以下のとき、
C、DをA、Bとする
C、DをA、Bとする
0をAとする
Aが0と等しくない間、次を繰り返す
Aを1だけ増加させる
AをBで割った余りにする
AとBを入れ替える
(A、B)の組を返す
Euc(A,B,C)の先頭、Euc(A,B,C)の1番目を出力する
",0197,groupB,tefu417
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
AがBより小さいとき、
AとBを入れ替える
0をAとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余り、Cに1を加えた値をA、B、Cとする
A、Bを出力する
",0197,groupB,nut5ch3st
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0を無限の整数列とする
Aが0より大きい間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
無限の整数列を1だけ増加させる
A、無限の整数列を出力する
",0197,groupB,Pure70os
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
AがB以上のとき、
BをAとする
BをAとする
BをAとする
BをAとする
0をAとする
中断するまで、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,nagasw0603
"中断するまで、次を繰り返す
空列をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
(A、B)の組が(0、0)の組と等しいとき、
繰り返しを中断する
AがB以下のとき、
Aが0と等しいとき、
Aを返す
Aの末尾に1を追加する
AとBをAで割った余りの最大公約数を返す
改行せずにAとBの最大公約数を出力する
空文字列、Aの総和を出力する
A、1を出力する
Aが0と等しいとき、
Aを返す
Aの末尾に1を追加する
AとBをAで割った余りの最大公約数を返す
改行せずにAとBの最大公約数を出力する
空文字列、Aの総和を出力する
",0197,groupB,yunakura
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
BをAとする
BをAとする
BをAとする
BをAとする
0をAとする
中断するまで、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
BをAとする
BをAとする
Aを1だけ増加させる
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,proayu33
"0をAとする
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより大きいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
BをAとする
BをAとする
BをAで割った余りをAとする
Aを1だけ増加させる
A、Bを出力する
0をAとする
",0197,groupB,aaa119
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
中断するまで、次を繰り返す
Aを1だけ増加させる
Aが0と等しいとき、
A、Bから1を引いた値を出力する
繰り返しを中断する
A、Bから1を引いた値を出力する
繰り返しを中断する
AをBで割った余りをAとする
AをBで割った余りをAとする
",0197,groupB,mimimi323
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
Aを1だけ増加させる
BをCで割った余りをAとする
BをAとする
AとBを入れ替える
A、Bを出力する
",0197,groupB,myst7
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
0を無限の整数列とする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
無限の整数列を1だけ増加させる
A、無限の整数列を出力する
",0197,groupB,roy2020
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
Aが0より大きい間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,decodeco
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくまたはBが0と等しいとき、
AがBより小さいとき、
0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,rei089
"中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
何もしない
0をAとする
中断するまで、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを1だけ増加させる
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
何もしない
",0197,groupB,mokomoko58
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
BをAとする
BをAとする
0をAとする
中断するまで、次を繰り返す
AをBで割った余りにする
AとBを入れ替える
Aを1だけ増加させる
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,mayu_build_01
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
中断するまで、次を繰り返す
Aを1だけ増加させる
BをCで割った余りをAとする
B、CをA、Bとする
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,sh415
"中断するまで、次を繰り返す
0をAとする
0をAとする
0をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
BをAとする
BをAとする
BをAとする
中断するまで、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを1だけ増加させる
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,gem19
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
0をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,mio0103
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
(A、B)の組が(0、0)の組と等しいとき、
繰り返しを中断する
AがB以上のとき、
何もしない
BをAとする
BをAとする
BをAとする
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AをBで割った余りにする
BをAとする
BをAとする
BをAとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,oreo0320
"AがB以上のとき、
BをAとする
BをAとする
BをAとする
BをAとする
0をAとする
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
Euclidean(A,B)
",0197,groupB,kinako_shinonome
"0をAとする
A、Bを出力する
1の間、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより大きいときAとBの最大公約数、そうでなければBとAの最大公約数
",0197,groupB,obrm2k
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,blue2020
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがB以上のとき、
C、DをA、Bとする
C、DをA、Bとする
0をAとする
中断するまで、次を繰り返す
Aが0と等しくないとき、
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
繰り返しを中断する
A、Bを出力する
",0197,groupB,Aliceandkumasan
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
中断するまで、次を繰り返す
Aに1を加えた値をAとする
AをBで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
AとBを入れ替える
A、Bを出力する
",0197,groupB,kyk_hm_99
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
1をAとする
中断するまで、次を繰り返す
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
Aを1だけ増加させる
BをAとする
BをAとする
A、Bを出力する
",0197,groupB,iori125
"0をAとする
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
0をAとする
",0197,groupB,moeknm
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがB以下のとき、
AとBを入れ替える
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,snoopea
"中断するまで、次を繰り返す
0をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
中断するまで、次を繰り返す
Aが0と等しいとき、
A、Bを出力する
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
Aに1を加えた値をAとする
",0197,groupB,yuko0828
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
0をAとする
A、Bの最大値、A、Bの最小値をA、Bとする
Aが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Cを1だけ増加させる
A、Bを出力する
",0197,groupB,artms007
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
0をAとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余り、Cに1を加えた値をA、B、Cとする
A、Bを出力する
",0197,groupB,mmk20
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
1をAとする
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,yui_k
"0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを1だけ増加させる
(A、B)からなる列を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより小さいとき、
BとCの最大公約数をAとする
Aを展開してを出力する
",0197,groupB,ysk18_
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
0をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,shioshiooshio
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,HARU55
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
(A、B)の組が(0、0)の組と等しいとき、
繰り返しを中断する
B、Cの最大値をAとする
B、Cの最小値をAとする
0をAとする
Aが0と等しくない間、次を繰り返す
AをBで割った余りにする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,Will25
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
B、Cの最大値をAとする
B、Cの最小値をAとする
0を無限の整数列とする
中断するまで、次を繰り返す
無限の整数列を1だけ増加させる
BをCで割った余りをAとする
B、CをA、Bとする
Aが0と等しいとき、
繰り返しを中断する
A、無限の整数列を出力する
",0197,groupB,tamamii20
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
AがB以上のとき、
BをAとする
BをAとする
中断するまで、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
Aが0と等しいとき、
BをAとする
繰り返しを中断する
BをAとする
BをAとする
中断するまで、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
Aが0と等しいとき、
BをAとする
繰り返しを中断する
A、Bを出力する
",0197,groupB,ym09rr6
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがB以上のとき、
BをAとする
BをAとする
BをAとする
BをAとする
0をAとする
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,kfwh87
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
B、Cの最大値をAとする
B、Cの最小値をAとする
0をAとする
中断するまで、次を繰り返す
Aを1だけ増加させる
BをCで割った余りをAとする
B、CをA、Bとする
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,meika
"中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Aの0番目が0と等しくかつAの1番目が0と等しいとき、
繰り返しを中断する
繰り返しを中断する
逆順にAをソートする
Bの先頭をAとする
Bの1番目をAとする
0をAとする
Aが0と等しくない間、次を繰り返す
Aを1だけ増加させる
AをBで割った余りをAとする
AとBを入れ替える
A、Bを出力する
",0197,groupB,Nakada065
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AにBを加えた値が0と等しいとき、
繰り返しを中断する
0をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
Aを1だけ増加させる
BをCで割った余りをAとする
BをAとする
BをAとする
A、Bを出力する
",0197,groupB,Pooh0514
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0を無限の整数列とする
AがBより大きいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
無限の整数列を1だけ増加させる
A、無限の整数列を出力する
",0197,groupB,udonman
"0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを1だけ増加させる
(A、B)からなる列を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
AとBの最大公約数を展開してを出力する
",0197,groupB,yuzukosyo
"1の間、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
(B、A)の組を(A、B)の組とする
0をAとする
1の間、次を繰り返す
Aが0と等しいとき、
A、Bを出力する
繰り返しを中断する
Aを1だけ増加させる
BをCで割った余りをAとする
BをAとする
(B、A)の組を(A、B)の組とする
",0197,groupB,phantom_0422
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AとBを入れ替える
AをBで割った余りにする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,Nanairo0716
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,hoshitaro32
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
0を無限の整数列とする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AとBを入れ替える
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
無限の整数列を1だけ増加させる
A、無限の整数列を出力する
",0197,groupB,lisa_06
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,miyu777
"0から1000未満までの数列を順にAとして、繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより大きいとき、
AとBを入れ替える
A、BをA、Bとする
0を無限の整数列とする
0から1000未満までの数列を順にAとして、繰り返す
Aが0と等しいとき、
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
無限の整数列を1だけ増加させる
Aを書式としてB、無限の整数列で整形した文字列を出力する
",0197,groupB,prprpr
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
繰り返しを中断する
AがB以下のとき、
C、DをA、Bとする
C、DをA、Bとする
0をAとする
Aが0と等しくない間、次を繰り返す
Aを1だけ増加させる
AをBで割った余りにする
AとBを入れ替える
(A、B)の組を返す
c(A,B,C)の先頭、c(A,B,C)の1番目を出力する
",0197,groupB,mai0526
"0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
BをAとする
AとBを入れ替える
Aを1だけ増加させる
(A、B)からなる列を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより小さいとき、
BとCの最大公約数をAとする
Aを展開してを出力する
",0197,groupB,maple13
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,Kunitomo
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AにBを加えた値が0と等しいとき、
繰り返しを中断する
0をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
Aを1だけ増加させる
BをCで割った余りをAとする
BをAとする
BをAとする
A、Bを出力する
",0197,groupB,guoguo
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
B、Cの最大値をAとする
B、Cの最小値をAとする
0を無限の整数列とする
1の間、次を繰り返す
無限の整数列を1だけ増加させる
BをCで割った余りをAとする
B、CをA、Bとする
Aが0と等しいとき、
繰り返しを中断する
A、無限の整数列を出力する
",0197,groupB,kurumi048
"0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを1だけ増加させる
(A、B)からなる列を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより小さいとき、
BとCの最大公約数をAとする
Aを展開してを出力する
",0197,groupB,nabenabe0927
"中断するまで、次を繰り返す
0を無限の整数列とする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AとBを入れ替える
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
無限の整数列を1だけ増加させる
A、無限の整数列を出力する
",0197,groupB,honoka46
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,mai0321
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,Lemon_1127
"0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
(A、B)の組を返す
AをBで割った余りをAとする
BをAとする
BをAとする
BをAとする
Aを1だけ増加させる
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
BをAとする
BをAとする
BをAとする
gozyo(B,C)をAとする
Aの先頭、Aの1番目を出力する
",0197,groupB,wonka3065
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
0をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,Hui0946
"0をAとする
Aの間、次を繰り返す
A、Bを出力する
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
繰り返しを中断する
AがBより大きいときAとBの最大公約数、そうでなければBとAの最大公約数
",0197,groupB,kurumin212
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
0をAとする
0をAとする
0をAとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがB以上のとき、
BをAとする
BをAとする
BをAとする
BをAとする
Aが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,ayk_rb_1103
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,momokai
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,kazari
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがB以下のとき、
AとBを入れ替える
1をAとする
中断するまで、次を繰り返す
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
Aが0と等しくないとき、
B、CをA、Bとする
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,aoaoaoi
"0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを1だけ増加させる
(A、B)からなる列を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより小さいとき、
AとBを入れ替える
BとCの最大公約数をAとする
Aを展開してを出力する
",0197,groupB,kori21
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがB以上のとき、
C、DをA、Bとする
C、DをA、Bとする
0をAとする
中断するまで、次を繰り返す
Aが0と等しくないとき、
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
繰り返しを中断する
A、Bを出力する
",0197,groupB,m1916075_
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
B、Cの最大値をAとする
B、Cの最小値をAとする
0をAとする
中断するまで、次を繰り返す
Aを1だけ増加させる
BをCで割った余りをAとする
B、CをA、Bとする
Aが0と等しいとき、
A、Bを出力する
",0197,groupB,akpinee
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
0をAとする
中断するまで、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aに1を加えた値をAとする
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,KA1NA0913
"0をAとする
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを1だけ増加させる
(A、B)からなる列を返す
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより小さいとき、
BとCの最大公約数をAとする
Aを展開してを出力する
",0197,groupB,blues11
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
0を無限の整数列とする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
BをAとする
AとBを入れ替える
無限の整数列を1だけ増加させる
A、無限の整数列を出力する
",0197,groupB,rt56
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
0をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
Aを1だけ増加させる
BをCで割った余りをAとする
BをAとする
BをAとする
A、Bを出力する
",0197,groupB,Shion20
"中断するまで、次を繰り返す
0をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
中断するまで、次を繰り返す
Aが0と等しいとき、
A、Bを出力する
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
Aに1を加えた値をAとする
",0197,groupB,shoko_a_
"中断するまで、次を繰り返す
次は例外に関する条件がある
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
AがBより小さいとき、
AとBを入れ替える
何もしない
0をAとする
中断するまで、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを1だけ増加させる
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
何もしない
",0197,groupB,ucacao33
"中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがB以下のとき、
AとBを入れ替える
AがBと等しいかどうかが0と等しいとき、
繰り返しを中断する
0をAとする
中断するまで、次を繰り返す
Aが0と等しいとき、
繰り返しを中断する
AをBで割った余りをAとする
AとBを入れ替える
Aを1だけ増加させる
A、Bを出力する
",0197,groupB,gon35
"0をAとする
A、Bを出力する
中断するまで、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しいとき、
AがBより大きいときAとBの最大公約数、そうでなければBとAの最大公約数
",0197,groupB,nanako1116
"1の間、次を繰り返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくかつBが0と等しいとき、
繰り返しを中断する
B、Cの最大値をAとする
B、Cの最小値をAとする
0をAとする
1の間、次を繰り返す
Aを1だけ増加させる
BをCで割った余りをAとする
B、CをA、Bとする
Aが0と等しいとき、
繰り返しを中断する
A、Bを出力する
",0197,groupB,sabuk421
"BをCで割った余りをAとする
AのときBとAの最大公約数、そうでなければBを返す
input()を空白で分割した字句列の各要素に整数を適用した列を展開してと[MASK]の最大公約数を出力する
",ALDS1_1_B,groupB,jakenu0x5e
"Aが0と等しいとき、
Aを返す
calc_gcd(A,B%A)を返す
識別子がAと等しいとき、
入力された文字列を空白文字で分割した字句列の各要素をBとし、Bの整数値の列をAとする
calc_gcd(B[0],B[1])をAとする
Aを書式としてBで整形した文字列を出力する
",ALDS1_1_B,groupB,kichi941
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aの間、次を繰り返す
Aを出力する
",ALDS1_1_B,groupB,cima
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
1の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aを出力する
プログラムを正常終了する
BをCで割った余りをAとする
BをAとする
BをAとする
",ALDS1_1_B,groupB,novel
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,tricom
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
CがDより小さいとき(C、D)の組、そうでなければ(D、C)の組を展開し、それぞれA、Bとする
中断するまで、次を繰り返す
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
C、AをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,tige
"Aが0と等しいとき、
Aを返す
gcn(A%B,B)を返す
入力された文字列をAとする
Aを空白文字で分割した字句列をAとする
gcn(int(A[0]),int(A[1]))を出力する
",ALDS1_1_B,groupB,dn6049949
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
中断するまで、次を繰り返す
AがBより小さいとき、
AとBを入れ替える
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
B、CをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,KubotaNoriko1230
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0より大きい間、次を繰り返す
Aを出力する
",ALDS1_1_B,groupB,pypy
"AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを返す
input()を空白で分割した字句列の各要素に整数を適用した列を展開してと[MASK]の最大公約数を出力する
",ALDS1_1_B,groupB,bs5lNkJ
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,kyuna
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより大きいとき、
AとBを入れ替える
Aの間、次を繰り返す
BをAで割った余り、AをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,ikatakos
"入力された文字列を空白で分割した字句列の各要素をAとし、Aの整数値の列を展開し、それぞれA、Bとする
Aが0と等しいとき、
Aを出力する
AがB以上のとき、
AとBをAで割った余りの最大公約数
AとBをAで割った余りの最大公約数
AとBの最大公約数
",ALDS1_1_B,groupB,manaka
"AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
識別子がAと等しいとき、
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,puyopop
"osのenvironに対応する値、もし存在しなければBをAとする
AがBと等しいとき、
A、Bを開いたファイルストリームをsysのstdinにする
Aが0と等しくない間、次を繰り返す
BをAとする
BをAで割った余りをAとする
BをAとする
Aを返す
入力された文字列を空白で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,RandyWaterhouse
"AがBより小さいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
find_gcd(A,B%A)を返す
識別子がAと等しいとき、
入力された文字列を空白で分割した字句列の各要素にxをパラメータとしてxの整数値を返す関数を適用した列のリストを展開し、それぞれA、Bとする
""{}""を出力する
",ALDS1_1_B,groupB,yoheikikuta
"AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを出力する
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数
",ALDS1_1_B,groupB,tsuru_aji
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをソートした列を展開し、それぞれA、Bとする
BをAとする
1の間、次を繰り返す
AをBで割った余りが0と等しいとき、
BをCで割った余りをAとする
BをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,bonoron
"入力された文字列を空白で分割した字句列をAとする
Bの先頭の整数値をAとする
Bの1番目の整数値をAとする
Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,Mackie
"2
21
114
AがBより大きいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
AをBで割った余りとBの最大公約数を返す
入力された文字列を空白で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
識別子がAと等しいとき、
run()
",ALDS1_1_B,groupB,y1721
"sysモジュールを用いる
osモジュールを用いる
mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを展開し、それぞれA、Bとする
AがBより大きいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
BとCの最大公約数をAとする
Aを出力する
",ALDS1_1_B,groupB,peroon
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,leeav_ten
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
Aが0と等しいとき、
AとBをAで割った余りの最大公約数を返す
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,momiji6
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Aの先頭とAの1番目の最大公約数を出力する
",ALDS1_1_B,groupB,meiadayz
"入力された文字列を空白で分割した字句列をAとする
Bの先頭の整数値をAとする
Bの1番目の整数値をAとする
AがBより小さいとき、
BをAとする
BをAとする
BをAとする
AをBで割った余りが0と等しくない間、次を繰り返す
BをAとする
BをAで割った余りをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,yreb
"A、Bの最小値が0と等しいとき、
Aを返す
gdc(min(A,B),max(A,B)%min(A,B))を返す
入力された文字列を空白文字で分割した字句列の各要素をBとし、Bの整数値の列をAとする
gdc(A[0],A[1])を出力する
",ALDS1_1_B,groupB,htkb
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,misuta
"Aが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A、Bの最大値、A、Bの最小値をA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,baron2
"未定値をAとする
AがB以上のとき、
BをCで割った余りをAとする
Aが0と等しいとき、
BをCで割った余りをAとする
Aが0と等しいとき、
greatest_common_divisor(A,B)を返す
入力された文字列を空白文字で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
greatest_common_divisor(A,B)を出力する
",ALDS1_1_B,groupB,mxg7y
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをソートした列をAとする
中断するまで、次を繰り返す
Aの1番目をAの0番目で割った余りが0と等しいとき、
Aの先頭を出力する
繰り返しを中断する
Bの1番目をBの先頭で割った余りをAとする
Aの先頭をAの1番目にする
BをAの0番目にする
",ALDS1_1_B,groupB,rockbirds12
"入力された文字列を空白文字で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,zywuwen
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,tefu417
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
main()
",ALDS1_1_B,groupB,halfpennyworths
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,shana
"sysモジュールを用いる
mathモジュールを用いる
sys.setrecursionlimit(2147483647)
heapqモジュールを用いる
collectionsモジュールを用いる
itertoolsモジュールを用いる
collectionsモジュールを用いる
collectionsモジュールを用いる
operatorモジュールを用いる
itertoolsモジュールを用いる
10の9乗に7を加えた値をAとする
Aの浮動小数点数を無限大とする
関数Iをパラメータなしとして定義する
関数LIをパラメータなしとして定義する
Aが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
LI()を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,nrkt
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,nananashi
"AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,rune
"Aが0と等しいとき、
AとBをAで割った余りの最大公約数を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBの最大公約数を出力する
識別子がAと等しいとき、
main()
",ALDS1_1_B,groupB,PythonHolic
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより大きいとき、
中断するまで、次を繰り返す
AをBで割った余りが0と等しいとき、
Aを出力する
繰り返しを中断する
AをBで割った余りをAとする
AがBより大きいとき、
",ALDS1_1_B,groupB,sota1235
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A.gcd(B,C)を出力する
",ALDS1_1_B,groupB,soutatahara
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
逆順にAをソートする
Cの先頭、Cの1番目をA、Bとする
中断するまで、次を繰り返す
AをBで割った余りが0と等しいとき、
Aを出力する
プログラムを状態0で終了する
B、AをBで割った余りをA、Bとする
",ALDS1_1_B,groupB,tappinasa
"enumモジュールを用いる
sysモジュールを用いる
mathモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
calc_gcd(A,B%A)を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aをcalc_gcd(B,C)で割った余りを出力する
",ALDS1_1_B,groupB,naoto172
"Aが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
入力された文字列の両端から空白改行を取り除いた文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Sim0000
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,toyuzuko
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Aの先頭がAの1番目より大きいとき、
Bの先頭をAとする
Bの1番目をAとする
Bの1番目をAとする
Bの先頭をAとする
Bの1番目をAとする
Bの先頭をAとする
Bの1番目をAとする
BをCで割った余りをAとする
Aが0と等しくない間、次を繰り返す
BをAとする
BをAで割った余りをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,jj1guj
"AがBより大きいとき、
BをAとする
BをAとする
BをAとする
BをAとする
Aが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
入力された文字列を空白文字で分割した字句列の各要素をCとし、Cの整数値の列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Fulltea
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Pure70os
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,nagasw0603
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
mathモジュールを用いる
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,yunakura
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
中断するまで、次を繰り返す
AがBより小さいとき、
BをAとする
BをAとする
BをAとする
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
BをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,proayu33
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,aaa119
"AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,myst7
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,roy2020
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,decodeco
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,rei089
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより大きいとき、
AとBを入れ替える
中断するまで、次を繰り返す
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
BをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,mokomoko58
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,mayu_build_01
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,sh415
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A.gcd(B,C)を出力する
",ALDS1_1_B,groupB,gem19
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
(A、B)からなる列をソートした列を展開し、それぞれA、Bとする
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,jngkk97
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A.gcd(B,C)を出力する
",ALDS1_1_B,groupB,mio0103
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,oreo0320
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,kinako_shinonome
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,obrm2k
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,blue2020
"mathモジュールを用いる
functoolsモジュールを用いる
Aを[MASK]と[MASK]の最大公約数で集約した列を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
0をAとする
AがBより小さいとき、
BをAとする
BをAとする
BをAとする
BをCで割った余りをAとする
BとCの最大公約数をAとする
Aを出力する
",ALDS1_1_B,groupB,Aliceandkumasan
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより大きいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,kyk_hm_99
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A.gcd(B,C)を出力する
",ALDS1_1_B,groupB,moeknm
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A.gcd(B,C)を出力する
",ALDS1_1_B,groupB,snoopea
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,yuko0828
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,mmk20
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A.gcd(B,C)を出力する
",ALDS1_1_B,groupB,yui_k
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,ysk18_
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを出力する
",ALDS1_1_B,groupB,shioshiooshio
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
中断するまで、次を繰り返す
AがBより小さいとき、
AとBを入れ替える
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
B、CをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,HARU55
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,bn1224
"Aが0より大きい間、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
C、Dの最大値、C、Dの最小値をA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Will25
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,tamamii20
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,tatejima
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,ym09rr6
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,meika
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Nakada065
"AをBで割った余りが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Pooh0514
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより大きいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
AをBで割った余りをAとする
AとBを入れ替える
Aを出力する
",ALDS1_1_B,groupB,udonman
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,yuzukosyo
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
(B、A)の組を(A、B)の組とする
1の間、次を繰り返す
Aが0と等しいとき、
Aを出力する
繰り返しを中断する
BをCで割った余りをAとする
BをAとする
(B、A)の組を(A、B)の組とする
",ALDS1_1_B,groupB,phantom_0422
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Nanairo0716
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,hoshitaro32
"AがBより小さいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
0をAとする
BとCの最大公約数をAとする
Aを出力する
",ALDS1_1_B,groupB,lisa_06
"fractionsモジュールを用いる
input().split(' ')の各要素にintを適用した列のリストを展開してと[MASK]の最大公約数を出力する
",ALDS1_1_B,groupB,miyu777
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
fractionsモジュールを用いる
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,prprpr
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
B.gcd(C,D)をAとする
Aを出力する
",ALDS1_1_B,groupB,maple13
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,Kunitomo
"AをBで割った余りが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,guoguo
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,kurumi048
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,nabenabe0927
"AがBより小さいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
0をAとする
BとCの最大公約数をAとする
Aを出力する
",ALDS1_1_B,groupB,honoka46
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,mai0321
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しくない間、次を繰り返す
BをCで割った余りをAとする
B、CをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,Lemon_1127
"中断するまで、次を繰り返す
Aが0と等しいとき、
Aを返す
AをBで割った余りをAとする
BをAとする
BをAとする
BをAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
BをAとする
BをAとする
BをAとする
gozyo(A,B)を出力する
",ALDS1_1_B,groupB,wonka3065
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,kurumin212
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,yukka_rinrin
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,ayk_rb_1103
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,momokai
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
中断するまで、次を繰り返す
AがBより小さいとき、
AとBを入れ替える
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
B、CをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,kazari
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,aoaoaoi
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより大きいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,kori21
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A.gcd(B,C)を出力する
",ALDS1_1_B,groupB,water0914
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,m1916075_
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,akpinee
"enumモジュールを用いる
sysモジュールを用いる
mathモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
calc_gcd(A,B%A)を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aをcalc_gcd(B,C)で割った余りを出力する
",ALDS1_1_B,groupB,umnkit0922
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,blues11
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Kureha
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A.gcd(B,C)を出力する
",ALDS1_1_B,groupB,rt56
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
B.gcd(C,D)をAとする
Aを出力する
",ALDS1_1_B,groupB,ltwx4649
"Aが0と等しくない間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
A、Bの最大値、A、Bの最小値をA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,horichan
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Shion20
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,s_68
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
BをCで割った余りをAとする
BをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,shoko_a_
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,ucacao33
"fractionsモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
B.gcd(C,D)をAとする
Aを出力する
",ALDS1_1_B,groupB,gon35
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,ss10225_
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AがBより大きいとき、
AとBを入れ替える
中断するまで、次を繰り返す
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
BをAとする
BをAとする
Aを出力する
",ALDS1_1_B,groupB,natsuki0804
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,miiyu
"enumモジュールを用いる
sysモジュールを用いる
mathモジュールを用いる
2000000000をAとする
1000000007をAとする
0.000000001をAとする
AがBより小さいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
calc_gcd(A,B%A)を返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aをcalc_gcd(B,C)で割った余りを出力する
",ALDS1_1_B,groupB,mh21716087
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,pen8pan9pon
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,nanako1116
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,sabuk421
"mathモジュールを用いる
入力された文字列を空白で分割した字句列の各要素をAとし、Aの整数値の列をA、Bとする
AとBの最大公約数を出力する
",ALDS1_1_B,groupB,Yuki13
"入力された文字列を空白で分割した字句列の各要素に整数を適用した列を展開し、それぞれA、Bとする
Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを出力する
",ALDS1_1_B,groupB,Shino107
"sysモジュールを用いる
sysのstdinから読み込んだ一行をAとする
sysのstdoutに[MASK]を書き込むをAとする
Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
xをパラメータとしてxの2乗にBを加えた値をCで割った余りを返す関数をAとする
DをCをBとするとするをAとする
1をEとする
1をFとする
100をAとする
1をAとする
Aが1と等しい間、次を繰り返す
BをAとする
0からB未満までの数列を順にAとして、繰り返す
f(A)をAとする
0からB未満までのC間隔の数列を順にAとして、繰り返す
BをAとする
0からB、CからDを引いた値の最小値未満までの数列を順にAとして、繰り返す
f(A)をAとする
AにBからCを引いた値の絶対値を掛けた値をDで割った余りをAとする
BとCの最大公約数をAとする
Aが1と等しくないとき、
繰り返しを中断する
Aを1だけ左シフトする
AがBと等しいとき、
Aが1と等しい間、次を繰り返す
f(A)をAとする
BからCを引いた値の絶対値とDの最大公約数をAとする
AがBより小さいときA、そうでなければ-1を返す
randomモジュールを用いる
乱数生成を初期化する
readline()の整数値をAとする
空列をAとする
(B)からなる列をAとする
Aの間、次を繰り返す
Aの先頭を取り出した値をネイピア数とする
0から10未満までの数列を順にAとして、繰り返す
1〜、つまりネイピア数から1を引いた値の整数乱数をAとする
1〜、つまりネイピア数から1を引いた値の整数乱数をAとする
pollard_rho(e,B,C)をAとする
Aが-1と等しくないとき、
繰り返しを中断する
Aが-1と等しいとき、
Aの末尾にネイピア数を追加する
Aの末尾にネイピア数をBで割った商を追加する
Aの末尾にBを追加する
Aをソートする
write(A%(B,' '.join(map(str,C))))
solve()
",NTL_1_A,groupB,jakenu0x5e
"空列をAとする
2からBの1を2で割った値乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AがBより大きいとき、
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
入力された文字列の整数値をAとする
改行せずにAの文字列にBを加えた値を出力する
soinnsuubunnkai(A)を展開してを出力する
",NTL_1_A,groupB,kuwaaaaaaaaaaaaaaaaa
"Bの0.5乗をAとする
空列をAとする
2からCに1を加えた値未満までの数列の各要素をBとし、Bの列をAとする
Aの0番目がB以下の間、次を繰り返す
Aの末尾にBの先頭を追加する
Bの先頭をAとする
Aの各要素をBとし、BをCで割った余りが0と等しくないときのBの列をAとする
Bを追加してAを拡張する
Aを返す
A
AがBに含まれるとき、
(A)からなる列を返す
空列をAとする
2をAとする
BをAとする
AがBの2乗以上の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
AがBに含まれるとき、
Aの末尾にBを追加する
1をAとする
Aを1だけ増加させる
Aでないとき、
(B)からなる列をAとする
Aを返す
集合をAとする
識別子がAと等しいとき、
入力された文字列の整数値をAとする
create_prime_list(int(10**4.5)+1)の集合をAとする
calc_divisors(B)をAとする
Aを書式としてB、空白文字を間に入れてCの各要素に整数を適用した列を連結した文字列で整形した文字列を出力する
",NTL_1_A,groupB,kichi941
"入力された文字列をAとする
改行せずにAにBを加えた値を出力する
Aの整数値をAとする
2をBとする
AをBで割った余りが0と等しくかつAが3より大きい間、次を繰り返す
空白文字を代わりの行末としてAを出力する
AをB分の一にする
Aを1だけ増加させる
BをCで割った商をAとする
AがB以上の間、次を繰り返す
AをBで割った余りが0と等しいとき、
空白文字を代わりの行末としてAを出力する
BをAとする
BをCで割った商をAとする
Aを出力する
",NTL_1_A,groupB,cima
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
Aの文字列にBを加えた値に空白文字を間に入れてDの各要素をCとし、Cの文字列の列を連結した文字列を加えた値を出力する
",NTL_1_A,groupB,novel
"Aを2で割った余りが0と等しいとき、
改行せずにAを出力する
Aを2で割った値の整数値を返す
3からBの0.5乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
改行せずに"" {}""を出力する
AをBで割った値の整数値を返す
改行せずに"" {}""を出力する
1を返す
入力された文字列の整数値をAとする
改行せずに""{}:""を出力する
1の間、次を繰り返す
ifprime(A)をAとする
Aが1と等しいとき、
空行を出力する
",NTL_1_A,groupB,tricom
"mathモジュールを用いる
(1)からなる列のBに1を加えた値回分の列をAとする
0をAの1番目とするをAの0番目にする
0からBに1を加えた値の0.5乗の切り上げ整数値未満までの数列を順にAとして、繰り返す
AのB番目のとき、
2にBを掛けた値からCの長さ未満までのB間隔の数列を順にAとして、繰り返す
0をAのB番目にする
Aを返す
sieve(int(B**0.5))をAとする
空列をAとする
compress(count(0),A)を順に円周率として、繰り返す
Aを円周率で割った余りが0と等しい間、次を繰り返す
Aを円周率分の一にする
Aの末尾に円周率を追加する
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
sysモジュールを用いる
itertoolsモジュールを用いる
Bから読み込んだ一行をAとする
readline()の整数値をAとする
Aを書式としてBで整形した文字列に空白文字を間に入れてprime_factor(B)の各要素に整数を適用した列を連結した文字列を加えた値を出力する
",NTL_1_A,groupB,tige
"collectionsモジュールを用いる
heapqモジュールを用いる
itertoolsモジュールを用いる
sysモジュールを用いる
mathモジュールを用いる
bisectモジュールを用いる
関数LIをパラメータなしとして定義する
関数Iをパラメータなしとして定義する
関数LSをパラメータなしとして定義する
sysのstdinから読み込んだ一行のリストをAとする
Aの-1番目が、つまり改行文字と等しいとき、
Aの末尾を除いた部分列を返す
Aを返す
0からB未満までの数列の各要素をAとし、I()の列を返す
0からB未満までの数列の各要素をAとし、LI()の列を返す
0からB未満までの数列の各要素をAとし、S()の列を返す
0からB未満までの数列の各要素をAとし、LS()の列を返す
sys.setrecursionlimit(1000000)
1000000007をAとする
Aが4より小さいとき、
(A)からなる列を返す
空列をAとする
2をAとする
Aの2乗がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aをソートする
Aを返す
I()をAとする
factorize(B)をAとする
Bを代わりの行末としてAを出力する
Aを展開してを出力する
何も返さない
識別子がAと等しいとき、
solve()
",NTL_1_A,groupB,dn6049949
"空列をAとする
BをAとする
改行せずにAを出力する
改行せずにAを出力する
2からBの(1/2)乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
空行を出力する
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,KubotaNoriko1230
"入力された文字列の整数値をAとする
改行せずにAを書式としてBで整形した文字列を出力する
Bの0.5乗の整数値に1を加えた値をAとする
2からB未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
改行せずにAを書式としてBで整形した文字列を出力する
AをB分の一にする
Aが1と等しくないときBを書式としてAで整形した文字列、そうでなければ、つまり空文字列を出力する
",NTL_1_A,groupB,pypy
"2のAから1を引いた値乗に対するAの剰余が1と等しいかどうかを返す
入力された文字列の整数値をAとする
改行せずにAを書式としてBで整形した文字列を出力する
is_prime(A)のとき、
Aを出力する
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aを2分の一にする
Aの末尾に2を追加する
3をAとする
AがBの0.5乗以下の間、次を繰り返す
is_prime(A)のとき、
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを2だけ増加させる
is_prime(A)のとき、
Aの末尾にBを追加する
Aを展開してを出力する
solve()
",NTL_1_A,groupB,bs5lNkJ
"xをパラメータとして空白文字を代わりの行末としてxを出力するを返す関数をAとする
入力された文字列をAとする
p(A+B)
Bの整数値をBとするをAとする
Aを2で割った余りが0と等しくかつAが3より大きい間、次を繰り返す
3をAとする
AにAを掛けた値がBより小さくかつCがAより大きい間、次を繰り返す
AをBで割った余りが0より大きいとき、
Aを出力する
",NTL_1_A,groupB,kyuna
"mathモジュールを用いる
collectionsモジュールを用いる
A、B、Cはグローバル変数とする
AをBで割った余りでない間、次を繰り返す
Aの末尾にBを追加する
AをBで割った商をAとする
Bの平方根をAとする
入力された文字列をAとする
Cの整数値、3をA、Bとする
Bの平方根をAとする
[MASK]の両端キュー、3をA、Bとする
divide_repeat(2)
AがB以下の間、次を繰り返す
divide_repeat(A)
Aを2だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
改行せずにAにBを加えた値を出力する
Aを展開してを出力する
",NTL_1_A,groupB,ikatakos
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2からBの平方根の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをBで割った商をAとする
Aが1と等しいとき、
繰り返しを中断する
Aが1と等しくないとき、
Aの末尾にBを追加する
改行せずにAを書式としてBで整形した文字列を出力する
Aを展開してを出力する
",NTL_1_A,groupB,manaka
"itertoolsモジュールを用いる
osのenvironに対応する値、もし存在しなければBをAとする
AがBと等しいとき、
A、Bを開いたファイルストリームをsysのstdinにする
2をAとする
itertools.chain([1,2,2],itertools.cycle([4,2,4,2,4,6,2,6]))をAとする
Bを順にAとして、繰り返す
AにAを掛けた値がBより大きいとき、
繰り返しを中断する
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
AをBだけ増加させる
Aが1より大きいとき、
入力された文字列の整数値をAとする
Aを(B、空白文字を間に入れてlist(factors(B))の各要素をCとし、str(C)の列を連結した文字列)の組で割った余りを出力する
",NTL_1_A,groupB,RandyWaterhouse
"mathモジュールを用いる
Aはグローバル変数とする
Bの平方根の整数値に1を加えた値をAとする
2からBに1を加えた値未満までの数列を順にAとして、繰り返す
0がAをBで割った余りと等しいとき、
Aの末尾にBを追加する
compute_prime_factor(A//B)
何も返さない
1がAと等しくないとき、
Aの末尾にBを追加する
何も返さない
識別子がAと等しいとき、
入力された文字列の整数値をAとする
空列をAとする
compute_prime_factor(A)
""{}: ""に空白文字を間に入れてBの各要素をAとし、Aの文字列の列を連結した文字列を加えた値を出力する
",NTL_1_A,groupB,yoheikikuta
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
1からBの0.5乗の整数値を2で割った商に1を加えた値未満までの数列を順にAとして、繰り返す
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2で割った商をAとする
Aを2にBを掛けた値に1を加えた値で割った余りが0と等しい間、次を繰り返す
Aの末尾に2にBを掛けた値に1を加えた値を追加する
Aを2にBを掛けた値に1を加えた値で割った商をAとする
Aが1と等しくないとき、
Aの末尾にBを追加する
改行せずにAの文字列にBを加えた値を出力する
Aを展開してを出力する
",NTL_1_A,groupB,tsuru_aji
"空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
Aの2乗がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aが1と等しくないとき、
Aを返す
入力された文字列の整数値をAとする
prime_factorize(B)をAとする
",NTL_1_A,groupB,bonoron
"mathモジュールを用いる
入力された文字列の整数値をAとする
(Bの文字列にCを加えた値)からなる列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBの文字列を追加する
AをB分の一にする
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの長さが1と等しいときAの先頭に空白文字を加えた値にBの文字列を加えた値、そうでなければ、つまり空白文字を間に入れてAを連結した文字列を出力する
",NTL_1_A,groupB,leeav_ten
"mathモジュールを用いる
入力された文字列の整数値をAとする
Bの整数値をAとする
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをBで割った値をAとする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの整数値の文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,momiji6
"入力された文字列の整数値をAとする
Bの1を2で割った値乗の整数値をAとする
空列をAとする
BをAとする
2をAとする
AがB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
AがBより大きいとき、
Aの末尾にBを追加する
Bを代わりの行末としてAを出力する
Aを展開してを出力する
",NTL_1_A,groupB,yreb
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
Cの各要素をBとし、((2)からなる列、3からint(math.sqrt(B))に1を加えた値未満までの2間隔の数列)の組の列の各要素をCとし、Bの列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBの文字列を追加する
AをB分の一にする
Aが1より大きいとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,htkb
"入力された文字列の整数値をAとする
改行せずにAの文字列にBを加えた値を出力する
2をAとする
空列をAとする
中断するまで、次を繰り返す
Aが1と等しいとき、
繰り返しを中断する
0をネイピア数とする
AをBで割った余りが0と等しい間、次を繰り返す
AをBで割った商をAとする
ネイピア数を1だけ増加させる
Aの末尾に(B、ネイピア数)からなる列を追加する
Aが2と等しいとき、
Aを1だけ増加させる
Aを2だけ増加させる
AがBの2乗より小さいとき、
Aの末尾に(B、1)からなる列を追加する
繰り返しを中断する
Bを順にAとして、繰り返す
0からBの1番目未満までの数列を順にAとして、繰り返す
改行せずに空白文字にAの先頭の文字列を加えた値を出力する
空行を出力する
",NTL_1_A,groupB,misuta
"copyモジュールを用いる
functoolsモジュールを用いる
A
BをAとする
Aが1と等しいとき、
((1, 1))からなる辞書をAのprimeFactorizationにする
空辞書をAのprimeFactorizationにする
2からBの0.5乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aが0より大きいとき、
CをAのprimeFactorizationのB番目にする
Aが1より大きいとき、
1をAのprimeFactorizationのB番目にする
AのprimeFactorizationを深くコピーした結果を返す
A
AのprimeFactorizationに対応する値、もし存在しなければ1、0が1と等しいとき、
1を返す
1をAとする
CのprimeFactorizationのキーと値の集まりを順にA、Bとして、繰り返す
AをBに1を加えた値倍にする
Aを返す
DのprimeFactorizationのキーと値の集まりの各要素をA、Cとし、0からC+1未満までの数列の各要素をBとし、AのB乗の列の総和の列をx、yをパラメータとしてxにyを掛けた値を返す関数で集約した列を返す
空列をAとする
1からBの0.5乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った商がBと等しくないとき、
Aの末尾にBをCで割った商を追加する
Aをソートした列を返す
入力された文字列の整数値をAとする
Divisor(B)をAとする
改行せずにAを書式としてBで整形した文字列を出力する
空列をAとする
0からB未満までの数列の各要素をDとし、C.primeFactors().items()をソートした列の列の各要素をA、Bとし、Aの列を展開してを出力する
",NTL_1_A,groupB,n_knuu
"入力された文字列の整数値をAとする
BをAとする
2をAとする
空列をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,baron2
"mathモジュールを用いる
空列をAとする
Bの平方根をAとする
2からBの切り上げ整数値未満までの数列を順にAとして、繰り返す
Aが1と等しいとき、
中断するまで、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った値をAとする
繰り返しを中断する
Aの長さが0と等しいとき、
Aの末尾にBを追加する
Aの末尾にBの整数値を追加する
Aを返す
入力された文字列の整数値をAとする
Aの文字列にBを加えた値に空白文字を間に入れてsimple_prime_factrize(A)の各要素をCとし、Cの文字列の列を連結した文字列を加えた値を出力する
",NTL_1_A,groupB,mxg7y
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
2からBの0.5乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
中断するまで、次を繰り返す
AをBで割った余りが0と等しくないとき、
繰り返しを中断する
Aの末尾にBを追加する
AをB分の一にする
Aが1と等しくないとき、
Aの末尾にBを追加する
Aの文字列にBを加えた値に空白文字を間に入れてCの各要素に整数を適用した列を連結した文字列を加えた値を出力する
",NTL_1_A,groupB,rockbirds12
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
区切りなしで空白文字を代わりの行末としてA、Bを出力する
Aを2で割った余りが0と等しいとき、
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3からBの1を2で割った値乗の整数値に1を加えた値未満までの2間隔の数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aが1と等しくないとき、
Aの末尾にBを追加する
Aの長さが0と等しいとき、
Aを出力する
0からBの長さ未満までの数列を順にAとして、繰り返す
AがBの長さから1を引いた値と等しいとき、
AのB番目を出力する
区切りなしで空白文字を代わりの行末としてAのB番目を出力する
",NTL_1_A,groupB,tefu417
"mathモジュールを用いる
typingモジュールを用いる
(1、B)からなる列をAとする
2からBの平方根の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
Aの末尾にBをCで割った商を追加する
Aをソートした列を返す
空列をAとする
calc_divisors(B)の先頭を除いた部分列をAとする
Bを順にAとして、繰り返す
中断するまで、次を繰り返す
CとDを割ったときの(商を展開し、それぞれA、Bとする
Aが0と等しいとき、
Aの末尾にBを追加する
BをAとする
繰り返しを中断する
Aが1と等しいとき、
繰り返しを中断する
Aを返す
入力された文字列の整数値をAとする
prime_factorize(B)をAとする
Aを書式としてB、空白文字を間に入れてCの各要素に整数を適用した列を連結した文字列で整形した文字列を出力する
main()
",NTL_1_A,groupB,halfpennyworths
"arrayモジュールを用いる
mathモジュールを用いる
B.array(C,([TrueforDinrange(E+1)]))をAとする
偽をAの0番目にする
偽をAの1番目にする
B.array(C)をAとする
2からBに1を加えた値未満までの数列を順にAとして、繰り返す
AのB番目のとき、
Aの末尾にBを追加する
Bに2を掛けた値からCに1を加えた値未満までのB間隔の数列を順にAとして、繰り返す
偽をAのB番目にする
Aを返す
識別子がAと等しいとき、
入力された文字列の整数値をAとする
BをAとする
Bの平方根の整数値に1を加えた値をAとする
sieve_of_eratosthenes(B)をAとする
B.array(C)をAとする
0をAとする
AがBの長さより小さい間、次を繰り返す
AをBのC番目で割った余りが0と等しいとき、
Aの末尾にBのC番目を追加する
AをBのC番目分の一にする
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを書式としてB、空白文字を間に入れてCの各要素に整数を適用した列を連結した文字列で整形した文字列を出力する
",NTL_1_A,groupB,shana
"入力された文字列の整数値をAとする
(Bの文字列にCを加えた値)からなる列をAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aを展開してを出力する
",NTL_1_A,groupB,nananashi
"mathモジュールを用いる
Bの平方根を四捨五入した整数値をAとする
BからCに1を加えた値未満までの数列を順にAとして、繰り返す
Aが2と等しいとき、
Aを2で割った余りが0と等しいとき、
最初からもう一度、繰り返す
真をAとする
3をAとする
Aの2乗がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
偽をAとする
Aに2を加えた値をAとする
Aのとき、
入力された文字列の整数値をAとする
BをAとする
空列をAとする
generate_prime_numbers(num_max=B)を順にAとして、繰り返す
Aが、つまり未定値と等しいとき、
Aの末尾にBの整数値を追加する
繰り返しを中断する
AがBより小さいとき、
Aの末尾にBの整数値を追加する
繰り返しを中断する
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aが1と等しいとき、
繰り返しを中断する
",NTL_1_A,groupB,rune
"空列、2をA、Bとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しくないとき、
Aを1だけ増加させる
最初からもう一度、繰り返す
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aを返す
入力された文字列の整数値をAとする
prime_factor(B)をAとする
改行せずにAの文字列にBを加えた値を出力する
空文字列を間に入れてCの各要素をA、Bとし、' 'にstr(A)を加えた値にBを掛けた値の列を連結した文字列を出力する
",NTL_1_A,groupB,kira924age
"mathモジュールを用いる
Aを2で割った余りが0と等しいとき、
2を返す
Bの平方根の整数値をAとする
2からBに1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
Aを返す
Aを返す
入力された文字列の整数値をAとする
空列をAとする
BをAとする
Aが1より大きい間、次を繰り返す
getMinprime(B)をAとする
Aの末尾にBを追加する
AをBで割った値の整数値をAとする
改行せずにAを書式としてBで整形した文字列を出力する
Bを順にAとして、繰り返す
改行せずにAを書式としてBで整形した文字列を出力する
空行を出力する
",NTL_1_A,groupB,tappinasa
"空列をAとする
BをAとする
2から--B**0.5を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0を無限の整数列とする
AをBで割った余りが0と等しい間、次を繰り返す
無限の整数列を1だけ増加させる
AをB分の一にする
Aの末尾に(B、無限の整数列)からなる列を追加する
Aが1と等しくないとき、
Aの末尾に(B、1)からなる列を追加する
Aが、つまり空列と等しいとき、
Aの末尾に(B、1)からなる列を追加する
Aを返す
入力された文字列の整数値をAとする
(Bの文字列にCを加えた値)からなる列をAとする
factorization(C)を順にA、Bとして、繰り返す
(B)からなる列のC回分の列を追加してAを拡張する
空白文字を間に入れてAの各要素に整数を適用した列を連結した文字列を出力する
",NTL_1_A,groupB,toyuzuko
"mathモジュールを用いる
入力された文字列の整数値をAとする
Bの平方根の整数値に1を加えた値をAとする
改行せずにAの文字列にBを加えた値を出力する
2からB未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
改行せずに空白文字にAの文字列を加えた値を出力する
AをBで割った商をAとする
Aが0と等しくなくかつAが1と等しくないとき、
改行せずに空白文字にAの文字列を加えた値を出力する
空行を出力する
",NTL_1_A,groupB,jj1guj
"Aが0と等しいとき、
((0, 1))からなる辞書を返す
Aが1と等しいとき、
((1, 1))からなる辞書を返す
BをAとする
Aの0.5乗をAとする
0からCの整数値に1を加えた値未満までの数列の各要素をBとし、0の列をAとする
-1をAの0番目にする
-1をAの1番目にする
2をAとする
AがBの0.5乗より小さい間、次を繰り返す
AのB番目が0と等しいとき、
BをAのB番目にする
2をAとする
AにBを掛けた値がC以下の間、次を繰り返す
-1をAのBにCを掛けた値番目にする
Aを1だけ増加させる
Aを1だけ増加させる
AがB以下の間、次を繰り返す
AのB番目が0と等しいとき、
BをAのB番目にする
Aを1だけ増加させる
空辞書をAとする
Bを順にAとして、繰り返す
Aが-1と等しいとき、
最初からもう一度、繰り返す
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをBで割った値をAとする
Aが0と等しいとき、
最初からもう一度、繰り返す
CをAのB番目にする
Aの整数値が1と等しくないとき、
1をAのBの整数値番目にする
Aを返す
入力された文字列の整数値をAとする
改行せずにAを書式としてBで整形した文字列を出力する
空列をAとする
factoring(B)のキーと値の集まりをソートした列を順にAとして、繰り返す
0からBの1番目未満までの数列を順にAとして、繰り返す
Aの末尾にBの先頭の文字列を追加する
空白文字を間に入れてAを連結した文字列を出力する
",NTL_1_A,groupB,Fulltea
"mathモジュールを用いる
入力された文字列の整数値をAとする
Bの平方根の整数値をAとする
1をAとする
空列をAとする
Aの2乗がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
Aの末尾にBをCで割った商を追加する
Aを1だけ増加させる
Aの集合のリストをAとする
Aの先頭を削除する
Bの長さをAとする
空列をAとする
空列をAとする
0からB未満までの数列を順にAとして、繰り返す
1をAとする
空列をAとする
Aの2乗がBのC番目以下の間、次を繰り返す
AのB番目をCで割った余りが0と等しいとき、
Aの末尾にBを追加する
Aの末尾にBのC番目をDで割った商を追加する
Aを1だけ増加させる
Aの集合をソートした列のリストをAとする
Aの長さが2と等しいとき、
Aの末尾にBのC番目を追加する
0からBの長さ未満までの数列を順にAとして、繰り返す
Bの長さから1を引いた値から0未満までの-1間隔の数列を順にAとして、繰り返す
AのBから1を引いた値番目がAのB番目より大きいとき、
AのB番目、AのBから1を引いた値番目をAのBから1を引いた値番目、AのB番目とする
空列をAとする
BをAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
0を無限の整数列とする
中断するまで、次を繰り返す
AをBのC番目で割った値をAとする
無限の整数列を1だけ増加させる
AをBのC番目で割った余りが0と等しいとき、
何もしない
Aの末尾に無限の整数列を追加する
繰り返しを中断する
改行せずにAを出力する
空白文字を代わりの行末としてAを出力する
0からBの長さ未満までの数列を順にAとして、繰り返す
0からBのC番目未満までの数列を順にAとして、繰り返す
AがBの長さから1を引いた値と等しくかつCがDのA番目から1を引いた値と等しいとき、
AのB番目を出力する
空白文字を代わりの行末としてAのB番目を出力する
",NTL_1_A,groupB,Pure70os
"入力された文字列の整数値をAとする
2をAとする
空列をAとする
BをAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,nagasw0603
"入力された文字列の整数値をAとする
2をAとする
空列をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りのとき、
Aを1だけ増加させる
AをB分の一にする
Aの末尾にBを追加する
Aが1より大きいとき、
Aの末尾にBを追加する
Aを返す
識別子がAと等しいとき、
Bを代わりの行末としてAを出力する
",NTL_1_A,groupB,yunakura
"BをAとする
空列をAとする
Bを代わりの行末としてAを出力する
2からBの(1/2)乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをBで割った商をAとする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
空行を出力する
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,proayu33
"入力された文字列の整数値をAとする
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
改行せずにAを出力する
空白文字を代わりの行末としてAを出力する
prime_factorize(A)を展開してを出力する
",NTL_1_A,groupB,aaa119
"mathモジュールを用いる
入力された文字列の整数値をAとする
空白文字を代わりの行末としてAの文字列にBを加えた値を出力する
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った商をAとする
Aを1だけ増加させる
Aの末尾にBを追加する
Aを展開してを出力する
",NTL_1_A,groupB,myst7
"入力された文字列の整数値をAとする
2をAとする
空列を無限の整数列とする
空白文字を代わりの行末としてAを書式としてBで整形した文字列を出力する
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをBで割った商をAとする
無限の整数列の末尾にAを追加する
Aを1だけ増加させる
Aが1と等しくないとき、
無限の整数列の末尾にAを追加する
無限の整数列を展開してを出力する
",NTL_1_A,groupB,roy2020
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
2をAとする
空列をAとする
Aの2乗がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
改行せずにAを出力する
",NTL_1_A,groupB,decodeco
"入力された文字列をAとする
改行せずにAにBを加えた値を出力する
Aの整数値をAとする
2をAとする
空列をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aに1を加えた値をAとする
Aが1より大きいとき、
Aの末尾にBを追加する
空白文字を間に入れてAの各要素に整数を適用した列のリストを連結した文字列を出力する
",NTL_1_A,groupB,rei089
"空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2で割った商をAとする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った商をAとする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
入力された文字列の整数値をAとする
f(B)をAとする
Cの各要素をBとし、Bの文字列の列をAとする
空白文字を間に入れてBを連結した文字列をAとする
""{}: {}""を出力する
",NTL_1_A,groupB,mokomoko58
"mathモジュールを用いる
入力された文字列の整数値をAとする
空列をAとする
BをAとする
2からBに1を加えた値の平方根の整数値に10を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aが0と等しくなくかつAが1と等しくないとき、
Aの末尾にBを追加する
改行せずにAを出力する
改行せずにAを出力する
Aを展開してを出力する
",NTL_1_A,groupB,mayu_build_01
"入力された文字列の整数値をAとする
改行せずにAの文字列にBを加えた値を出力する
空列をAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを展開してを出力する
",NTL_1_A,groupB,sh415
"空列をAとする
3をAとする
入力された文字列の整数値をAとする
改行せずにAを出力する
空白文字を代わりの行末としてAを出力する
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2で割った商をAとする
AがBの1を2で割った値乗以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った商をAとする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
空白文字を間に入れてAの各要素に整数を適用した列を連結した文字列を出力する
",NTL_1_A,groupB,gem19
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをBで割った商をAとする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,mio0103
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,oreo0320
"空列をAとする
BをAとする
改行せずにAを出力する
改行せずにAを出力する
2からBの(1/2)乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
Aが、つまり空列と等しいとき、
何もしない
空行を出力する
Aを返す
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,kinako_shinonome
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2からBの平方根の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをBで割った商をAとする
Aが1と等しいとき、
繰り返しを中断する
Aが1と等しくないとき、
Aの末尾にBを追加する
改行せずにAを書式としてBで整形した文字列を出力する
Aを展開してを出力する
",NTL_1_A,groupB,obrm2k
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,blue2020
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,Aliceandkumasan
"入力された文字列の整数値をAとする
空列をAとする
2をAとする
BをAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,kyk_hm_99
"入力された文字列の整数値をAとする
空白文字を代わりの行末としてAの文字列にBを加えた値を出力する
空列をAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをBで割った商をAとする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
空白文字を間に入れてBの各要素をAとし、Aの文字列の列を連結した文字列を出力する
",NTL_1_A,groupB,iori125
"空列をAとする
BをAとする
改行せずにAを出力する
改行せずにAを出力する
2からBの(1/2)乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
空行を出力する
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,moeknm
"空列をAとする
BをAとする
2からBの0.5乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
0からB未満までの数列を順にAとして、繰り返す
Aの末尾にBを追加する
Aが1と等しくないとき、
Aの末尾にBを追加する
改行せずにAを出力する
入力された文字列の整数値をAとする
factor(A)
",NTL_1_A,groupB,snoopea
"空列をAとする
BをAとする
改行せずにAを出力する
改行せずにAを出力する
2からBの(1/2)乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
空行を出力する
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,yuko0828
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをBで割った商をAとする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,mmk20
"入力された文字列の整数値をAとする
2をAとする
空列をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aに1を加えた値をAとする
Aが1より大きいとき、
Aの末尾にBを追加する
Aを返す
factorize(B)をAとする
Cの各要素をBとし、Bの文字列の列をAとする
空白文字を間に入れてAを連結した文字列をAとする
""{}: {}""を出力する
",NTL_1_A,groupB,yui_k
"入力された文字列の整数値をAとする
空列をAとする
2をAとする
BをAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをBで割った商をAとする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,ysk18_
"入力された文字列の整数値をBとするをAとする
Bの0.5乗の整数値をAとする
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2で割った値をAとする
3からB未満までの2間隔の数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをBで割った値の整数値をAとする
Aが1と等しいとき、
繰り返しを中断する
AにAを掛けた値がBより大きいとき、
繰り返しを中断する
Aが1と等しくないとき、
Aの末尾にBを追加する
区切りなしで改行せずにA、Bを出力する
0からBの長さ未満までの数列を順にAとして、繰り返す
改行せずに空白文字を出力する
改行せずにAのB番目を出力する
空文字列を出力する
",NTL_1_A,groupB,shioshiooshio
"入力された文字列をAとする
改行せずにAにBを加えた値を出力する
Aの整数値をAとする
2をAとする
空列をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aに1を加えた値をAとする
Aが1より大きいとき、
Aの末尾にBを追加する
空白文字を間に入れてAの各要素に整数を適用した列のリストを連結した文字列を出力する
",NTL_1_A,groupB,HARU55
"空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
入力された文字列の整数値をAとする
prime(B)をAとする
Bの各要素に整数を適用した列をAとする
空白文字を間に入れてBを連結した文字列をAとする
Aを書式としてB、Cで整形した文字列を出力する
",NTL_1_A,groupB,bn1224
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,Will25
"入力された文字列の整数値をAとする
空列をAとする
2をAとする
BをAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをBで割った商をAとする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,ym09rr6
"入力された文字列の整数値をAとする
区切りなしで改行せずにA、Bを出力する
2をAとする
空列をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBの文字列を追加する
空白文字を間に入れてAを連結した文字列をAとする
Aを出力する
",NTL_1_A,groupB,kfwh87
"mathモジュールを用いる
入力された文字列の整数値をAとする
空列をAとする
BをAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,meika
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
改行せずにAを書式としてBで整形した文字列を出力する
0からBの長さ未満までの数列を順にAとして、繰り返す
改行せずに空文字列、AのB番目を出力する
空行を出力する
",NTL_1_A,groupB,Nakada065
"入力された文字列の整数値をAとする
区切りなしで改行せずにA、Bを出力する
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3からBの0.5乗に1を加えた値の整数値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
0からBの長さ未満までの数列を順にAとして、繰り返す
改行せずにAのB番目を出力する
AがBの長さから1を引いた値より小さいとき、
改行せずに空白文字を出力する
空文字列を出力する
",NTL_1_A,groupB,Pooh0514
"xをパラメータとして空白文字を代わりの行末としてxを出力するを返す関数をAとする
入力された文字列をAとする
p(A+B)
Bの整数値をBとするをAとする
Aを2で割った余りが0と等しくかつAが3より大きい間、次を繰り返す
3をAとする
AにAを掛けた値がBより小さくかつCがAより大きい間、次を繰り返す
AをBで割った余りが0より大きいとき、
Aを出力する
",NTL_1_A,groupB,salmon04
"mathモジュールを用いる
入力された文字列の整数値をAとする
(Bの文字列にCを加えた値)からなる列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBの文字列を追加する
AをB分の一にする
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Bの各要素をBとし、Bの文字列の列をAとする
空白文字を間に入れてAを連結した文字列をAとする
Aを出力する
",NTL_1_A,groupB,phantom_0422
"空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
入力された文字列の整数値をAとする
改行せずに""{}: ""を出力する
s(A)を展開してを出力する
",NTL_1_A,groupB,Nanairo0716
"入力された文字列の整数値をAとする
BをAとする
区切りなしで空白文字を代わりの行末としてA、Bを出力する
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
prime_factorize(B)をAとする
Aを展開してを出力する
",NTL_1_A,groupB,lisa_06
"空列をAとする
2からBの1を2で割った値乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AがBより大きいとき、
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
入力された文字列の整数値をAとする
改行せずにAの文字列にBを加えた値を出力する
soinnsuubunnkai(A)を展開してを出力する
",NTL_1_A,groupB,miyu777
"空列をAとする
BをAとする
改行せずにAを出力する
改行せずにAを出力する
2からBの1を2で割った値乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
Aが、つまり空列と等しいとき、
何もしない
空行を出力する
Aを返す
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,mai0526
"入力された文字列の整数値をAとする
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
prime_factorize(B)をAとする
改行せずに""{}: ""を出力する
Aを展開してを出力する
",NTL_1_A,groupB,maple13
"入力された文字列の整数値をAとする
空列をAとする
BをAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,Kunitomo
"入力された文字列の整数値をAとする
区切りなしで改行せずにA、Bを出力する
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3からBの0.5乗に1を加えた値の整数値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
0からBの長さ未満までの数列を順にAとして、繰り返す
改行せずにAのB番目を出力する
AがBの長さから1を引いた値より小さいとき、
改行せずに空白文字を出力する
空文字列を出力する
",NTL_1_A,groupB,guoguo
"入力された文字列の整数値をAとする
改行せずにAの文字列にBを加えた値を出力する
2をAとする
空列をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを展開してを出力する
",NTL_1_A,groupB,kurumi048
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,nabenabe0927
"入力された文字列の整数値をAとする
[MASK]のリストをAとする
BをAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
区切りなしで改行せずにA、Bを出力する
",NTL_1_A,groupB,honoka46
"入力された文字列をAとする
改行せずにAにBを加えた値を出力する
Aの整数値をAとする
2をBとする
AをBで割った余りが0と等しくかつAが3より大きい間、次を繰り返す
空白文字を代わりの行末としてAを出力する
AをB分の一にする
Aを1だけ増加させる
BをCで割った商をAとする
AがB以上の間、次を繰り返す
AをBで割った余りが0と等しいとき、
空白文字を代わりの行末としてAを出力する
BをAとする
BをCで割った商をAとする
Aを出力する
",NTL_1_A,groupB,mai0321
"入力された文字列の整数値をAとする
BをAとする
2をAとする
空列をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,Lemon_1127
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
Aの文字列にBを加えた値に空白文字を間に入れてDの各要素をCとし、Cの文字列の列を連結した文字列を加えた値を出力する
",NTL_1_A,groupB,wonka3065
"入力された文字列の整数値をAとする
空列をAとする
BをAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,kurumin212
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2分の一にする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,ayk_rb_1103
"入力された文字列の整数値をAとする
空列をAとする
2をAとする
BをAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,momokai
"空列をAとする
BをAとする
改行せずにAを出力する
改行せずにAを出力する
2からBの(1/2)乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
空行を出力する
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,kazari
"mathモジュールを用いる
BをAとする
空列をAとする
2からBの平方根の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aの長さが0と等しくまたはBが1と等しくないとき、
Aの末尾にBの整数値を追加する
Aをソートする
入力された文字列の整数値をAとする
soi(A)
",NTL_1_A,groupB,aoaoaoi
"入力された文字列の整数値をAとする
Bの文字列にCを加えた値をAとする
真をAとする
BをAとする
2をAとする
Aの間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
Aを空白文字にBの文字列を加えた値だけ増加させる
Aを1だけ減少させる
BがCの0.5乗より小さいかどうかをAとする
Aを1だけ増加させる
Aが1と等しくないとき、
Aを空白文字にBの整数値の文字列を加えた値だけ増加させる
Aを出力する
",NTL_1_A,groupB,kori21
"入力された文字列の整数値をAとする
改行せずにAの文字列にBを加えた値を出力する
Aが1より大きい間、次を繰り返す
2からBに1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
改行せずに空白文字にAの文字列を加えた値を出力する
繰り返しを中断する
改行せずに空白文字にAの文字列を加えた値を出力する
1をAとする
繰り返しを中断する
空行を出力する
",NTL_1_A,groupB,m1916075_
"入力された文字列の整数値をAとする
空列をAとする
BをAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,akpinee
"入力された文字列の整数値をAとする
空列をAとする
BをAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aを2分の一にする
Aの末尾に2を追加する
Aを3で割った余りが0と等しい間、次を繰り返す
Aを3分の一にする
Aの末尾に3を追加する
Aを5で割った余りが0と等しい間、次を繰り返す
Aを5分の一にする
Aの末尾に5を追加する
Aを7で割った余りが0と等しい間、次を繰り返す
Aを7分の一にする
Aの末尾に7を追加する
Aが10000000以上のとき、
Aの末尾にBを追加する
3からBに1を加えた値未満までの2間隔の数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
改行せずにAを出力する
",NTL_1_A,groupB,KA1NA0913
"入力された文字列の整数値をAとする
空列をAとする
BをAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,blues11
"mathモジュールを用いる
入力された文字列の整数値をAとする
BをAとする
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをB分の一にする
Aの末尾にBの文字列を追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBの文字列を追加する
Aの文字列にBを加えた値に空白文字を間に入れてCを連結した文字列を加えた値を出力する
",NTL_1_A,groupB,rt56
"mathモジュールを用いる
入力された文字列の整数値をAとする
空白文字を代わりの行末としてAの文字列にBを加えた値を出力する
空列をAとする
2をAとする
AがBの平方根以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った商をAとする
Aを1だけ増加させる
Aの末尾にBを追加する
Aを展開してを出力する
",NTL_1_A,groupB,ltwx4649
"入力された文字列の整数値をAとする
改行せずにAの文字列にBを加えた値を出力する
空列をAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを展開してを出力する
",NTL_1_A,groupB,Shion20
"入力された文字列の整数値をBとするをAとする
空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2で割った商をAとする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った商をAとする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
空文字列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
Aに空白文字を加えた値にBのC番目の文字列を加えた値をAとする
Aを1だけ増加させる
Aの文字列にBを加えた値にCを加えた値を出力する
",NTL_1_A,groupB,s_68
"入力された文字列の整数値をAとする
空列をAとする
BをAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,shoko_a_
"空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2で割った商をAとする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った商をAとする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
入力された文字列の整数値をAとする
f(B)をAとする
Cの各要素をBとし、Bの文字列の列をAとする
空白文字を間に入れてBを連結した文字列をAとする
""{}: {}""を出力する
",NTL_1_A,groupB,ucacao33
"Aを2で割った余りが0と等しいとき、
改行せずにAを出力する
Aを2で割った値の整数値を返す
3からBの0.5乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
改行せずに"" {}""を出力する
AをBで割った値の整数値を返す
改行せずに"" {}""を出力する
1を返す
入力された文字列の整数値をAとする
改行せずに""{}:""を出力する
1の間、次を繰り返す
ifprime(A)をAとする
Aが1と等しいとき、
空行を出力する
",NTL_1_A,groupB,gon35
"空列をAとする
Aを2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
Aを2で割った商をAとする
3をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
Aの末尾にBを追加する
AをBで割った商をAとする
Aを2だけ増加させる
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
入力された文字列の整数値をAとする
f(B)をAとする
Cの各要素をBとし、Bの文字列の列をAとする
空白文字を間に入れてBを連結した文字列をAとする
""{}: {}""を出力する
",NTL_1_A,groupB,natsuki0804
"入力された文字列の整数値をAとする
BをAとする
空列をAとする
2からBの0.5乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aが1と等しくないとき、
Aの末尾にBを追加する
Aの各要素をBとし、Bの文字列の列をAとする
Bの文字列にCを加えた値に空白文字を間に入れてAを連結した文字列を加えた値をAとする
Aを出力する
",NTL_1_A,groupB,miiyu
"空列をAとする
BをAとする
改行せずにAを出力する
改行せずにAを出力する
2からBの(1/2)乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
空行を出力する
Aを返す
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,jwu37
"入力された文字列の整数値をAとする
空列をAとする
BをAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
Aの末尾にBを追加する
AをB分の一にする
Aを1だけ増加させる
Aが1より大きいとき、
Aの末尾にBを追加する
",NTL_1_A,groupB,pen8pan9pon
"空列をAとする
BをAとする
改行せずにAを出力する
改行せずにAを出力する
2からBの(1/2)乗を1で割った商の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
0をAとする
AをBで割った余りが0と等しい間、次を繰り返す
Aを1だけ増加させる
AをB分の一にする
Aの末尾に(B、C)からなる列を追加する
0からB未満までの数列を順にAとして、繰り返す
改行せずに空文字列、Aを出力する
Aが1と等しくないとき、
改行せずに空文字列、Aを出力する
空行を出力する
入力された文字列の整数値をAとする
factorization(A)
",NTL_1_A,groupB,mao0615
"入力された文字列の整数値をAとする
(Bの文字列にCを加えた値)からなる列をAとする
2をAとする
AにAを掛けた値がB以下の間、次を繰り返す
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
Aの末尾にBを追加する
Aを1だけ増加させる
Aが1と等しくないとき、
Aを展開してを出力する
",NTL_1_A,groupB,nanako1116
"Aを2で割った余りが0と等しいとき、
改行せずにAを出力する
Aを2で割った値の整数値を返す
3からBの0.5乗の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AをBで割った余りが0と等しいとき、
改行せずに"" {}""を出力する
AをBで割った値の整数値を返す
改行せずに"" {}""を出力する
1を返す
入力された文字列の整数値をAとする
改行せずに""{}:""を出力する
1の間、次を繰り返す
ifprime(A)をAとする
Aが1と等しいとき、
空行を出力する
",NTL_1_A,groupB,sabuk421
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
BをAで集約した列を出力する
",NTL_1_C,groupB,kuwaaaaaaaaaaaaaaaaa
"sysモジュールを用いる
mathモジュールを用いる
functoolsモジュールを用いる
Aをx、yをパラメータとしてxにyを掛けた値をxとyの最大公約数で割った商を返す関数で集約した列を返す
入力された文字列をAとする
入力された文字列を空白で分割した字句列の各要素をBとし、Bの整数値の列をAとする
solve(B)をAとする
Aを出力する
識別子がAと等しいとき、
main(sys.argv[1:])
",NTL_1_C,groupB,kichi941
"Aの間、次を繰り返す
Aを返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
AとBの最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,cima
"AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
mathモジュールを用いる
functoolsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
lcm_list(A)を出力する
",NTL_1_C,groupB,novel
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの集合のリストをAとする
Aの長さが1と等しくない間、次を繰り返す
Bの末尾とBの-2番目の最大公約数をAとする
Bの末尾にBの-2番目を掛けた値をCで割った値の整数値をAとする
Aの、つまり先頭から-2番目までの部分列をAとする
Aの末尾にBを追加する
Aの先頭を出力する
",NTL_1_C,groupB,tricom
"mathモジュールを用いる
(1)からなる列のBに1を加えた値回分の列をAとする
0をAの1番目とするをAの0番目にする
0からBに1を加えた値の0.5乗の切り上げ整数値未満までの数列を順にAとして、繰り返す
AのB番目のとき、
2にBを掛けた値からCの長さ未満までのB間隔の数列を順にAとして、繰り返す
0をAのB番目にする
Aを返す
itertoolsモジュールを用いる
sieve(int(B**0.5))をAとする
空列をAとする
compress(count(0),A)を順に円周率として、繰り返す
Aを円周率で割った余りが0と等しい間、次を繰り返す
Aを円周率分の一にする
Aの末尾に円周率を追加する
Aが1と等しくないとき、
Aの末尾にBを追加する
Aを返す
collectionsモジュールを用いる
sysモジュールを用いる
Bから読み込んだ一行をAとする
readline()の整数値をAとする
readline()を空白で分割した字句列の各要素に整数を適用した列の各要素をBとし、prime_factor(B)の辞書カウンタの列をAとする
集合をAとする
Bを順にAとして、繰り返す
Bのキーの集まりを追加してAを更新する
1をAとする
Dの各要素をAとし、AのCの各要素をBとし、BのA番目の列の最大値乗の列を順にAとして、繰り返す
AをB倍にする
Aを出力する
",NTL_1_C,groupB,tige
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
空辞書を辞書とする
Bを順にAとして、繰り返す
空列をAとする
2をAとする
Bの平方根をAとする
空辞書をAとする
AがB以下の間、次を繰り返す
AをBで割った余りが0と等しいとき、
AをBで割った商をAとする
Aの末尾にBを追加する
Aを1だけ減少させる
Aが1と等しいとき、
繰り返しを中断する
Aを1だけ増加させる
Aの長さが0と等しくまたはBが1と等しくないとき、
Aの末尾にBを追加する
Bを順にAとして、繰り返す
AがBに含まれるとき、
AのB番目を1だけ増加させる
1をAのB番目にする
Bのキーの集まりを順にAとして、繰り返す
Aが、つまり辞書に含まれるとき、
辞書のA番目、BのA番目の最大値を辞書のA番目にする
BのA番目を辞書のA番目にする
1をAとする
辞書のキーと値の集まりを順にA、Bとして、繰り返す
AをBのC乗倍にする
Aを出力する
",NTL_1_C,groupB,dn6049949
"中断するまで、次を繰り返す
AがBより小さいとき、
AとBを入れ替える
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
B、CをA、Bとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bから1を引いた値から0未満までの-1間隔の数列を順にAとして、繰り返す
AのB番目にAのBから1を引いた値番目を掛けた値をAのB番目とAのBから1を引いた値番目の最大公約数で割った値の整数値をAのBから1を引いた値番目にする
Aの先頭を出力する
",NTL_1_C,groupB,KubotaNoriko1230
"Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
AにBを掛けた値をAとBの最大公約数で割った商を返す
functoolsモジュールを用いる
入力された文字列をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列をAとする
BをAで集約した列を出力する
solve()
",NTL_1_C,groupB,bs5lNkJ
"mathモジュールを用いる
入力された文字列
1をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを順にAとして、繰り返す
Aを出力する
",NTL_1_C,groupB,kyuna
"mathモジュールを用いる
collectionsモジュールを用いる
functoolsモジュールを用いる
operatorモジュールを用いる
A、B、Cはグローバル変数とする
Dのコピー、集合、偽をA、B、Cとする
中断するまで、次を繰り返す
Cの各要素をBとし、BをDで割った余りでないときのBの列の集合をAとする
AをBからCを引いた値との論理和にする
Aでないとき、
BをAとする
繰り返しを中断する
Aの末尾にBを追加する
Dの各要素をBとし、BをCで割った商の列の集合をAとする
真をAとする
Aのとき、
Bの最大値の平方根の切り捨て整数値をAとする
入力された文字列の整数値、入力された文字列を空白で分割した字句列の各要素に整数を適用した列の集合をA、Bとする
3、[MASK]の両端キュー、Dの最大値の平方根の切り捨て整数値をA、B、Cとする
divide(2)
AがB以下の間、次を繰り返す
divide(A)
Aを2だけ増加させる
Bを1を初期値としてAで集約した列にCを1を初期値としてAで集約した列を掛けた値を出力する
",NTL_1_C,groupB,ikatakos
"mathモジュールを用いる
入力された文字列
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
0からCの長さ未満までの数列の各要素をBとし、、つまり空列の列をAとする
0からBの長さ未満までの数列を順にAとして、繰り返す
BのC番目をAとする
BをAとする
2からBの平方根の整数値に1を加えた値未満までの数列を順にAとして、繰り返す
AがBより大きいとき、
繰り返しを中断する
AをBで割った余りが0と等しい間、次を繰り返す
AのB番目の末尾にCを追加する
AをBで割った商をAとする
Aが1と等しいとき、
繰り返しを中断する
Aが1と等しくないとき、
AのB番目の末尾にCを追加する
集合をAとする
Bを順にAとして、繰り返す
AをBの集合との論理和にする
1をAとする
Bを順にAとして、繰り返す
AをBの0からEの長さ未満までの数列の各要素をDとし、CのD番目内のBの出現回数の列の最大値乗倍にする
Aを出力する
",NTL_1_C,groupB,manaka
"itertoolsモジュールを用いる
osのenvironに対応する値、もし存在しなければBをAとする
AがBと等しいとき、
A、Bを開いたファイルストリームをsysのstdinにする
2をAとする
itertools.chain([1,2,2],itertools.cycle([4,2,4,2,4,6,2,6]))をAとする
Bを順にAとして、繰り返す
AにAを掛けた値がBより大きいとき、
繰り返しを中断する
AをBで割った余りが0と等しい間、次を繰り返す
AをB分の一にする
AをBだけ増加させる
Aが1より大きいとき、
入力された文字列の整数値をAとする
空辞書をAとする
入力された文字列を空白で分割した字句列の各要素をBとし、Bの整数値の列を順にAとして、繰り返す
空辞書をAとする
get_factors(B)を順にAとして、繰り返す
Aに対応する値、もし存在しなければB、0に1を加えた値をAのB番目にする
Bを順にAとして、繰り返す
CのB番目、Aに対応する値、もし存在しなければB、0の最大値をAのB番目にする
1をAとする
Bを順にAとして、繰り返す
AをBのCのB番目乗倍にする
Aを出力する
",NTL_1_C,groupB,RandyWaterhouse
"copyモジュールを用いる
mathモジュールを用いる
typingモジュールを用いる
Aはグローバル変数とする
Bの平方根の整数値に1を加えた値をAとする
2からBに1を加えた値未満までの数列を順にAとして、繰り返す
0がAをBで割った余りと等しいとき、
Aの末尾にBを追加する
compute_prime_factor(A//B)
何も返さない
1がAと等しくないとき、
Aの末尾にBを追加する
何も返さない
識別子がAと等しいとき、
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素にxをパラメータとしてxの整数値を返す関数を適用した列のリストをAとする
空辞書をAとする
0からB未満までの数列を順にAとして、繰り返す
空列をAとする
compute_prime_factor(A[B])
DをAのBのC番目番目にする
Bの最大値をAとする
BのC番目をAとする
Cのキーと値の集まりを順にA、Bとして、繰り返す
AがBと等しくまたはAが1と等しいとき、
最初からもう一度、繰り返す
BのC番目を深くコピーした結果をAとする
Bを順にAとして、繰り返す
AがBに含まれるとき、
AのAのBと等しい要素の最初の位置を取り出した値
Aの末尾にBを追加する
1をAとする
Bを順にAとして、繰り返す
AをB倍にする
Aを出力する
",NTL_1_C,groupB,yoheikikuta
"入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
空列をAとする
空列をAとする
0からB未満までの数列を順にAとして、繰り返す
空列をAとする
AのB番目が1と等しいとき、
Aの末尾に1を追加する
1からB[C]の0.5乗の整数値を2で割った商に1を加えた値未満までの数列を順にAとして、繰り返す
AのB番目を2で割った余りが0と等しい間、次を繰り返す
Aの末尾に2を追加する
AのB番目を2で割った商をAのB番目にする
AのB番目を2にCを掛けた値に1を加えた値で割った余りが0と等しい間、次を繰り返す
Aの末尾に2にBを掛けた値に1を加えた値を追加する
AのB番目を2にCを掛けた値に1を加えた値で割った商をAのB番目にする
AのB番目が1と等しくないとき、
Aの末尾にBのC番目を追加する
Aの末尾にBを追加する
0からB未満までの数列を順にAとして、繰り返す
0からBのC番目の長さ未満までの数列を順にAとして、繰り返す
AのB番目のC番目がDに含まれないとき、
Aの末尾にBのC番目のD番目を追加する
BのC番目内のBのC番目のD番目の出現回数からE内のBのC番目のD番目の出現回数を引いた値をAとする
Aが0より大きいとき、
0からB未満までの数列を順にAとして、繰り返す
Aの末尾にBのC番目のD番目を追加する
1をAとする
Bを順にAとして、繰り返す
AをB倍にする
Aを出力する
",NTL_1_C,groupB,tsuru_aji
"Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭にBの1番目を掛けた値をg(B[0],B[1])で割った値をAとする
Bの2番目から、つまり末尾までの部分列を順にAとして、繰り返す
AにBを掛けた値をg(A,B)で割った値をAとする
Aの整数値を出力する
",NTL_1_C,groupB,momiji6
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
Aを出力する
",NTL_1_C,groupB,meiadayz
"入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列をAとする
0からD未満までの数列の各要素をCとし、BのC番目の整数値の列をAとする
0からBから1を引いた値未満までの数列を順にAとして、繰り返す
BのC番目をAとする
BのCに1を加えた値番目をAとする
AをBで割った余りが0と等しくない間、次を繰り返す
BをAとする
BをAで割った余りをAとする
BをAとする
AのBに1を加えた値番目にAのB番目を掛けた値をCで割った商をAのBに1を加えた値番目にする
AのBから1を引いた値番目を出力する
",NTL_1_C,groupB,yreb
"入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列をAとする
B.__next__()をAとする
Bを順にAとして、繰り返す
BをAとする
AをB倍にする
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
AをB分の一にする
Aを出力する
",NTL_1_C,groupB,htkb
"mathモジュールを用いる
BとCの最大公約数をAとする
BにCを掛けた値をDで割った商をAとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
calc_LCM(A,B)をAとする
Aを出力する
",NTL_1_C,groupB,misuta
"mathモジュールを用いる
1をAとする
Bを順にAとして、繰り返す
AにBを掛けた値をAとBの最大公約数で割った商をAとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素をAとし、Aの整数値の列と[MASK]の最小公倍数を出力する
識別子がAと等しいとき、
aoj()
",NTL_1_C,groupB,n_knuu
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,baron2
"CがDより大きいとき(C、D)からなる列、そうでなければ(D、C)からなる列を展開し、それぞれA、Bとする
Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
AにBを掛けた値をAとBの最大公約数で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白文字で分割した字句列の各要素をBとし、Bの整数値の列をAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AとBのC番目の最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,mxg7y
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素をBとし、Bの整数値の列をAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,tefu417
"mathモジュールを用いる
typingモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
Aの長さが1と等しいとき、
Aの先頭を返す
BをAで集約した列を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
least_common_multiple_of_numbers(B)をAとする
Aを出力する
何も返さない
main()
",NTL_1_C,groupB,halfpennyworths
"AがBより小さいとき、
AとBを入れ替える
AがBと等しくまたはBが0と等しいとき、
Aを返す
B、AをBで割った余りをA、Bとする
AとBの最大公約数を返す
AにBを掛けた値をAとBの最大公約数で割った商を返す
Aの長さが2と等しいとき、
Aの先頭とAの1番目の最小公倍数を返す
(Bの先頭とBの1番目の最小公倍数)からなる列をAとする
Bの2番目から、つまり末尾までの部分列を追加してAを拡張する
multi_lcm(A)を返す
識別子がAと等しいとき、
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
multi_lcm(A)を出力する
",NTL_1_C,groupB,shana
"functoolsモジュールを用いる
mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白文字で分割した字句列の各要素に整数を適用した列のリストをAとする
Cをx、yをパラメータとしてAにBを掛けた値をAとBの最大公約数で割った商を返す関数で集約した列を出力する
",NTL_1_C,groupB,nananashi
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの0番目をAとする
Bの先頭を除いた部分列を順にAとして、繰り返す
AにBを掛けた値をAとBの最大公約数で割った値の整数値をAとする
Aを出力する
",NTL_1_C,groupB,vjudge2
"AがBより小さいとき、
AとBを入れ替える
Aが0より大きい間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
未定値をAとする
Bを順にAとして、繰り返す
Aが、つまり未定値と等しいとき、
BをAとする
最初からもう一度、繰り返す
calc_gcd(B,C)をAとする
BにAを掛けた値をCで割った値をAとする
Aの整数値を出力する
",NTL_1_C,groupB,rune
"functoolsモジュールを用いる
Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
BをAで集約した列を出力する
",NTL_1_C,groupB,toyuzuko
"mathモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AとBのC番目の最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,jj1guj
"入力された文字列の整数値をAとする
A、Bの最小値が0と等しいとき、
A、Bの最大値を返す
GCD(min(A,B),max(A,B)%min(A,B))を返す
AにBを掛けた値をGCD(A,B)で割った商を返す
入力された文字列を空白文字で分割した字句列の各要素をBとし、Bの整数値の列をAとする
1をAとする
Bを順にAとして、繰り返す
LCM(B,A)をAとする
Aを出力する
",NTL_1_C,groupB,Fulltea
"functoolsモジュールを用いる
mathモジュールを用いる
入力された文字列の整数値をAとする
AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
入力された文字列を空白で分割した字句列の各要素をBとし、Bの整数値の列をAとする
lcm_list(A)を出力する
",NTL_1_C,groupB,Pure70os
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
Bを1を初期値としてAで集約した列を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
BをAで集約した列を出力する
",NTL_1_C,groupB,nagasw0603
"入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
fractionsモジュールを用いる
Bの先頭をAとする
1からBの長さ未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを返す
Aと[MASK]の最小公倍数を出力する
",NTL_1_C,groupB,yunakura
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,proayu33
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,aaa119
"mathモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭とBの1番目の最小公倍数をAとする
2をAとする
0からB未満までの数列を順にAとして、繰り返す
AとBのC番目の最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,myst7
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,roy2020
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
0からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,decodeco
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列をAとする
BをAで集約した列を出力する
",NTL_1_C,groupB,rei089
"mathモジュールを用いる
functoolsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
Aを展開してと[MASK]の最小公倍数を出力する
",NTL_1_C,groupB,mokomoko58
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,mayu_build_01
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Aを展開してと[MASK]の最小公倍数を出力する
",NTL_1_C,groupB,sh415
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,gem19
"中断するまで、次を繰り返す
AがBより小さいとき、
AとBを入れ替える
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
B、CをA、Bとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bから1を引いた値から0未満までの-1間隔の数列を順にAとして、繰り返す
AのB番目にAのBから1を引いた値番目を掛けた値をAのB番目とAのBから1を引いた値番目の最大公約数で割った値の整数値をAのBから1を引いた値番目にする
Aの先頭を出力する
",NTL_1_C,groupB,mio0103
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,oreo0320
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
BをAとする
BのC番目をAとする
BにCを掛けた値をBとCの最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,kinako_shinonome
"mathモジュールを用いる
入力された文字列の整数値をAとする
1をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを順にAとして、繰り返す
BにAを掛けた値をBとAの最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,obrm2k
"Aの間、次を繰り返す
Aを返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
AとBの最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,blue2020
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素をBとし、Bの整数値の列をAとする
Aを展開してと[MASK]の最小公倍数を出力する
",NTL_1_C,groupB,Aliceandkumasan
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,kyk_hm_99
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
0からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,moeknm
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素をBとし、Bの整数値の列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,snoopea
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,yuko0828
"mathモジュールを用いる
1をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bを順にAとして、繰り返す
AにBを掛けた値をAとBの最大公約数で割った商をAとする
Aを出力する
main(int(input()))
",NTL_1_C,groupB,mmk20
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,yui_k
"mathモジュールを用いる
1をAとする
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bを順にAとして、繰り返す
AにBを掛けた値をAとBの最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,ysk18_
"中断するまで、次を繰り返す
AがBより小さいとき、
AとBを入れ替える
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
B、CをA、Bとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bから1を引いた値から0未満までの-1間隔の数列を順にAとして、繰り返す
AのB番目にAのBから1を引いた値番目を掛けた値をAのB番目とAのBから1を引いた値番目の最大公約数で割った値の整数値をAのBから1を引いた値番目にする
Aの先頭を出力する
",NTL_1_C,groupB,HARU55
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,bn1224
"mathモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
LCM(B,A)をAとする
Aを出力する
",NTL_1_C,groupB,Will25
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,tamamii20
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,tatejima
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列をAとする
Bの各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,ym09rr6
"mathモジュールを用いる
functoolsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
AにBを掛けた値をAとBの最大公約数で割った商を返す
BをAで集約した列を出力する
",NTL_1_C,groupB,meika
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,Nakada065
"AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った値をAとする
Aの整数値を出力する
",NTL_1_C,groupB,Pooh0514
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,udonman
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
lcm_list(A)を出力する
",NTL_1_C,groupB,yuzukosyo
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,Nanairo0716
"fractionsモジュールを用いる
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
AとBの最小公倍数を出力する
",NTL_1_C,groupB,hoshitaro32
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
0からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,lisa_06
"Aの間、次を繰り返す
Aを返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
AとBの最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,miyu777
"入力された文字列の整数値をAとする
fractionsモジュールを用いる
Bの先頭をAとする
1からBの長さ未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを返す
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Aと[MASK]の最小公倍数を出力する
",NTL_1_C,groupB,prprpr
"Aの間、次を繰り返す
B、AをBで割った余りをA、Bとする
Aを返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
AとBの最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,mai0526
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,maple13
"Aの間、次を繰り返す
Aを返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
AとBの最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,Kunitomo
"AがBより小さいとき、
AとBを入れ替える
AをBで割った余りが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った値をAとする
Aの整数値を出力する
",NTL_1_C,groupB,guoguo
"fractionsモジュールを用いる
AにBを掛けた値をC.gcd(A,B)で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AとBのC番目の最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,kurumi048
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
BをAで集約した列を出力する
",NTL_1_C,groupB,nabenabe0927
"AがBより小さいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
AとBの最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,honoka46
"AがBより小さいとき、
AとBを入れ替える
Aが0と等しいとき、
Aを返す
AとBをAで割った余りの最大公約数を返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
AとBの最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,mai0321
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,Lemon_1127
"mathモジュールを用いる
Bの先頭にBの1番目を掛けた値をBの先頭とBの1番目の最大公約数で割った商をAとする
0からBから2を引いた値未満までの数列を順にAとして、繰り返す
AにBのCに2を加えた値番目を掛けた値をAとBのCに2を加えた値番目の最大公約数で割った商をAとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
keisan(A,B)を出力する
",NTL_1_C,groupB,wonka3065
"mathモジュールを用いる
入力された文字列
1をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを順にAとして、繰り返す
BにAを掛けた値をBとAの最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,kurumin212
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,yukka_rinrin
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,ayk_rb_1103
"mathモジュールを用いる
入力された文字列の整数値をAとする
1をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストを順にAとして、繰り返す
BにAを掛けた値をBとAの最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,momokai
"中断するまで、次を繰り返す
AがBより小さいとき、
AとBを入れ替える
BをCで割った余りをAとする
Aが0と等しいとき、
繰り返しを中断する
B、CをA、Bとする
Aを返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bから1を引いた値から0未満までの-1間隔の数列を順にAとして、繰り返す
AのB番目にAのBから1を引いた値番目を掛けた値をAのB番目とAのBから1を引いた値番目の最大公約数で割った値の整数値をAのBから1を引いた値番目にする
Aの先頭を出力する
",NTL_1_C,groupB,kazari
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
Bの先頭を除いた部分列を順にAとして、繰り返す
AにBを掛けた値をAとBの最大公約数で割った値の整数値をAとする
Aを出力する
",NTL_1_C,groupB,aoaoaoi
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,kori21
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,water0914
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,m1916075_
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
BをAで集約した列を出力する
",NTL_1_C,groupB,akpinee
"mathモジュールを用いる
1をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bを順にAとして、繰り返す
AにBを掛けた値をAとBの最大公約数で割った商をAとする
Aを出力する
main(int(input()))
",NTL_1_C,groupB,blues11
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,Kureha
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,rt56
"mathモジュールを用いる
functoolsモジュールを用いる
AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Aを展開してと[MASK]の最小公倍数を出力する
",NTL_1_C,groupB,horichan
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素をBとし、Bの整数値の列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,Shion20
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
空行を出力する
Aが1と等しいとき、
Aの先頭を出力する
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを1だけ増加させる
Aを出力する
",NTL_1_C,groupB,s_68
"Aの間、次を繰り返す
Aを返す
AをAとBの最大公約数で割った商にBを掛けた値を返す
入力された文字列
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
1をAとする
Bを順にAとして、繰り返す
AとBの最小公倍数をAとする
Aを出力する
",NTL_1_C,groupB,shoko_a_
"fractionsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列をAとする
Bの各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をD.gcd(A,B[C])で割った商をAとする
Aを出力する
",NTL_1_C,groupB,ucacao33
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,gon35
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
Aを出力する
",NTL_1_C,groupB,ss10225_
"mathモジュールを用いる
functoolsモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
AにBを掛けた値をAとBの最大公約数で割った商を返す
Bを1を初期値としてAで集約した列を返す
Aを展開してと[MASK]の最小公倍数を出力する
",NTL_1_C,groupB,natsuki0804
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
Bの先頭を除いた部分列を順にAとして、繰り返す
AにBを掛けた値をAとBの最大公約数で割った値の整数値をAとする
Aを出力する
",NTL_1_C,groupB,pen8pan9pon
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの集合のリストをAとする
Aの長さが1と等しくない間、次を繰り返す
Bの末尾とBの-2番目の最大公約数をAとする
Bの末尾にBの-2番目を掛けた値をCで割った値の整数値をAとする
Aの、つまり先頭から-2番目までの部分列をAとする
Aの末尾にBを追加する
Aの先頭を出力する
",NTL_1_C,groupB,sabuk421
"mathモジュールを用いる
入力された文字列の整数値をAとする
入力された文字列を空白で分割した字句列の各要素に整数を適用した列のリストをAとする
Bの先頭をAとする
1からB未満までの数列を順にAとして、繰り返す
AにBのC番目を掛けた値をAとBのC番目の最大公約数で割った商をAとする
Aを出力する
",NTL_1_C,groupB,Yuki13
